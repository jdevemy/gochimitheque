// Code generated by "jade.go"; DO NOT EDIT.

package jade

import (
	"encoding/json"
	"fmt"
	"io"
)

const (
	create_5__17 = `<form id="product"><input id="exactMatchEmpiricalFormula" type="hidden"/><input id="exactMatchlinearFormula" type="hidden"/><input id="exactMatchCasNumber" type="hidden"/><input id="exactMatchCeNumber" type="hidden"/><input id="exactMatchName" type="hidden"/><input id="exactMatchSynonyms" type="hidden"/><input id="exactMatchClassofcompounds" type="hidden"/><input id="exactMatchPhysicalstate" type="hidden"/><div class="form-row"><div class="form-group col-sm-auto"><span class="badge badge-pill badge-danger">&nbsp;</span></div><div class="form-group col-sm-5">`
	create_5__20 = `</div></div><div class="form-row"><div class="form-group col-sm-auto"><span class="badge badge-pill badge-danger">&nbsp;</span></div><div class="form-group col-sm-5">`
	create_5__22 = `</div><div class="form-group col-sm-1"><button id="fconverter" class="btn btn-link" type="button" data-toggle="popover" data-content="no result" title="convert linear to empirical formula" onclick="linearToEmpirical();"><span class="mdi mdi-rotate-3d mdi-24px"></span></button></div></div><div class="form-row"><div class="form-group col-sm-auto"><span class="badge badge-pill badge-danger">&nbsp;</span></div><div class="form-group col-sm-6">`
	create_5__29 = `</div></div><div class="form-row"><div class="form-group col-sm-5 d-flex align-items-end">`
	create_5__30 = `</div><div class="form-group col-sm-1 d-flex align-items-end"><button id="magical-button" onclick="magic();"><span class="mdi mdi-24px mdi-auto-fix"></span></button></div></div><div class="form-row"><div class="form-group col-sm-6">`
	create_5__39 = `</span></button></form></div><!--  Code generated by go generate; DO NOT EDIT.
 --><script>    
	var locale_en_advancedsearch_text = "advanced search";
	
	var locale_en_casnumber_cmr_title = "CMR";
	
	var locale_en_casnumber_label_title = "CAS";
	
	var locale_en_cenumber_label_title = "CE";
	
	var locale_en_classofcompound_label_title = "class of compounds";
	
	var locale_en_clearsearch_text = "clear search form";
	
	var locale_en_close = "close";
	
	var locale_en_created = "created";
	
	var locale_en_createperson_mailsubject = "Chimithèque new account\r\n";
	
	var locale_en_delete = "delete";
	
	var locale_en_edit = "edit";
	
	var locale_en_email_placeholder = "enter your email";
	
	var locale_en_empiricalformula_label_title = "empirical formula";
	
	var locale_en_export_text = "export";
	
	var locale_en_hazardstatement_label_title = "hazard statement(s)";
	
	var locale_en_hidedeleted_text = "hide deleted";
	
	var locale_en_linearformula_label_title = "liner formula";
	
	var locale_en_logo_information1 = "Chimithèque logo designed by ";
	
	var locale_en_logo_information2 = "Do not use or copy without her permission.";
	
	var locale_en_menu_bookmark = "my bookmarks";
	
	var locale_en_menu_create_productcard = "create product card";
	
	var locale_en_menu_entity = "entities";
	
	var locale_en_menu_home = "home";
	
	var locale_en_menu_logout = "logout";
	
	var locale_en_menu_password = "change my password";
	
	var locale_en_menu_people = "people";
	
	var locale_en_menu_storelocation = "store locations";
	
	var locale_en_modified = "modified";
	
	var locale_en_password_placeholder = "enter your password";
	
	var locale_en_physicalstate_label_title = "physical state";
	
	var locale_en_precautionarystatement_label_title = "precautionary statement(s)";
	
	var locale_en_product_disposalcomment_title = "disposal comment";
	
	var locale_en_product_msds_title = "MSDS";
	
	var locale_en_product_radioactive_title = "radioactive";
	
	var locale_en_product_remark_title = "remark";
	
	var locale_en_product_restricted_title = "restricted access";
	
	var locale_en_product_threedformula_title = "3D formula";
	
	var locale_en_resetpassword2_text = "reset my password, I am not a robot";
	
	var locale_en_resetpassword_areyourobot = "are you a robot?";
	
	var locale_en_resetpassword_done = "A new temporary password has been sent to %s";
	
	var locale_en_resetpassword_mailsubject1 = "Chimithèque new temporary password\r\n";
	
	var locale_en_resetpassword_mailsubject2 = "Chimithèque password reset link\r\n";
	
	var locale_en_resetpassword_message_mailsentto = "a reinitialization link has been sent to";
	
	var locale_en_resetpassword_text = "reset password";
	
	var locale_en_resetpassword_warning_enteremail = "enter your email in the login form";
	
	var locale_en_s_casnumber = "CAS";
	
	var locale_en_s_casnumber_cmr = "CMR";
	
	var locale_en_s_custom_name_part_of = "part of name";
	
	var locale_en_s_empiricalformula = "emp. formula";
	
	var locale_en_s_hazardstatements = "hazard statement(s)";
	
	var locale_en_s_name = "name";
	
	var locale_en_s_precautionarystatements = "precautionary statement(s)";
	
	var locale_en_s_signalword = "signal word";
	
	var locale_en_s_storage_barecode = "barecode";
	
	var locale_en_s_symbols = "symbol(s)";
	
	var locale_en_save = "save";
	
	var locale_en_search_text = "search";
	
	var locale_en_showdeleted_text = "show deleted";
	
	var locale_en_signalword_label_title = "signal word";
	
	var locale_en_stock_storelocation_sub_title = "including children store locations";
	
	var locale_en_stock_storelocation_title = "in this store location";
	
	var locale_en_storage_barecode_title = "barecode";
	
	var locale_en_storage_batchnumber_title = "batch number";
	
	var locale_en_storage_borrow = "borrow";
	
	var locale_en_storage_clone = "clone";
	
	var locale_en_storage_comment_title = "comment";
	
	var locale_en_storage_entrydate_title = "entry date";
	
	var locale_en_storage_exitdate_title = "exit date";
	
	var locale_en_storage_expirationdate_title = "expiration date";
	
	var locale_en_storage_openingdate_title = "opening date";
	
	var locale_en_storage_quantity_title = "quantity";
	
	var locale_en_storage_restore = "restore";
	
	var locale_en_storage_showhistory = "show history";
	
	var locale_en_storage_unborrow = "unborrow";
	
	var locale_en_submitlogin_text = "enter";
	
	var locale_en_supplier_label_title = "supplier";
	
	var locale_en_switchproductview_text = "switch to product view";
	
	var locale_en_switchstorageview_text = "switch to storage view";
	
	var locale_en_test = "One test";
	
    
	var locale_fr_advancedsearch_text = "recherche avancée";
	
	var locale_fr_casnumber_cmr_title = "CMR";
	
	var locale_fr_casnumber_label_title = "CAS";
	
	var locale_fr_cenumber_label_title = "CE";
	
	var locale_fr_classofcompound_label_title = "famille chimique";
	
	var locale_fr_clearsearch_text = "effacer le formulaire";
	
	var locale_fr_close = "fermer";
	
	var locale_fr_created = "créé";
	
	var locale_fr_createperson_mailsubject = "Chimithèque nouveau compte\r\n";
	
	var locale_fr_delete = "supprimer";
	
	var locale_fr_edit = "editer";
	
	var locale_fr_email_placeholder = "entrez votre email";
	
	var locale_fr_empiricalformula_label_title = "formule brute";
	
	var locale_fr_export_text = "exporter";
	
	var locale_fr_hazardstatement_label_title = "mention(s) de danger H-EUH";
	
	var locale_fr_hidedeleted_text = "cacher supprimés";
	
	var locale_fr_linearformula_label_title = "formule linéaire";
	
	var locale_fr_logo_information1 = "Logo Chimithèque réalisé par ";
	
	var locale_fr_logo_information2 = "Ne pas utiliser ou copier sans sa permission.";
	
	var locale_fr_menu_bookmark = "mes favoris";
	
	var locale_fr_menu_create_productcard = "créer fiche produit";
	
	var locale_fr_menu_entity = "entités";
	
	var locale_fr_menu_home = "accueil";
	
	var locale_fr_menu_logout = "déconnexion";
	
	var locale_fr_menu_password = "changer mon mot de passe";
	
	var locale_fr_menu_people = "utilisateurs";
	
	var locale_fr_menu_storelocation = "entrepôts";
	
	var locale_fr_modified = "modifié";
	
	var locale_fr_password_placeholder = "entrez votre mot de passe";
	
	var locale_fr_physicalstate_label_title = "état physique";
	
	var locale_fr_precautionarystatement_label_title = "conseil(s) de prudence P";
	
	var locale_fr_product_disposalcomment_title = "commentaire de destruction";
	
	var locale_fr_product_msds_title = "FDS";
	
	var locale_fr_product_radioactive_title = "radioactif";
	
	var locale_fr_product_remark_title = "remarque";
	
	var locale_fr_product_restricted_title = "accès restreint";
	
	var locale_fr_product_threedformula_title = "formule 3D";
	
	var locale_fr_resetpassword2_text = "réinitialiser mon mot de passe, je ne suis pas un robot";
	
	var locale_fr_resetpassword_areyourobot = "êtes vous un robot ?";
	
	var locale_fr_resetpassword_done = "Un nouveau mot de passe temporaire a été envoyé à %s";
	
	var locale_fr_resetpassword_mailsubject1 = "Chimithèque nouveau mot de passe temporaire\r\n";
	
	var locale_fr_resetpassword_mailsubject2 = "Chimithèque lien de réinitialisation de mot de passe\r\n";
	
	var locale_fr_resetpassword_message_mailsentto = "un mail de réinitialisation a été envoyé à";
	
	var locale_fr_resetpassword_text = "réinitialiser mon mot de passe";
	
	var locale_fr_resetpassword_warning_enteremail = "entrez votre adresse mail dans le formulaire";
	
	var locale_fr_s_casnumber = "CAS";
	
	var locale_fr_s_custom_name_part_of = "partie du nom";
	
	var locale_fr_s_empiricalformula = "formule brute";
	
	var locale_fr_s_hazardstatements = "mention(s) de danger H-EUH";
	
	var locale_fr_s_name = "nom";
	
	var locale_fr_s_precautionarystatements = "conseil(s) de prudence P";
	
	var locale_fr_s_signalword = "mention d'avertissement";
	
	var locale_fr_s_storage_barecode = "code barre";
	
	var locale_fr_s_symbols = "symbole(s)";
	
	var locale_fr_save = "enregistrer";
	
	var locale_fr_search_text = "rechercher";
	
	var locale_fr_showdeleted_text = "voir supprimés";
	
	var locale_fr_signalword_label_title = "mention d'avertissement";
	
	var locale_fr_storage_barecode_title = "code barre";
	
	var locale_fr_storage_batchnumber_title = "numéro de lot";
	
	var locale_fr_storage_borrow = "emprunter";
	
	var locale_fr_storage_clone = "cloner";
	
	var locale_fr_storage_comment_title = "commentaire";
	
	var locale_fr_storage_entrydate_title = "date d'entrée";
	
	var locale_fr_storage_exitdate_title = "date de sortie";
	
	var locale_fr_storage_expirationdate_title = "date d'expiration";
	
	var locale_fr_storage_openingdate_title = "date d'ouverture";
	
	var locale_fr_storage_quantity_title = "quantité";
	
	var locale_fr_storage_restore = "restaurer";
	
	var locale_fr_storage_showhistory = "voir historique";
	
	var locale_fr_storage_unborrow = "restituer";
	
	var locale_fr_submitlogin_text = "entrer";
	
	var locale_fr_supplier_label_title = "fournisseur";
	
	var locale_fr_switchproductview_text = "vue par produits";
	
	var locale_fr_switchstorageview_text = "vue par stockages";
	
	var locale_fr_test = "Un test";
	

</script>`
	create_5__57 = `"></script><script>
    $( document ).ready(function() {
    
        //
        // update form validation
        //
        $( "#product" ).validate({
            // ignore required to validate select2
            ignore: "",
            errorClass: "alert alert-danger",
            rules: {
                name: {
                    required: true,
                },
                empiricalformula: {
                    required: true,
                    remote: {
                        url: "",
                        type: "post",
                        beforeSend: function(jqXhr, settings) {
                            id = -1
                            if ($("form#product input#product_id").length) {
                                id = $("form#product input#product_id").val()
                            }
                            settings.url = proxyPath + "validate/product/" + id + "/empiricalformula/";
                        },
                        data: {
                            empiricalformula: function() {
                                return $('select#empiricalformula').select2('data')[0].text;
                            },
                        },
                    },
                },
                casnumber: {
                    required: true,
                    remote: {
                        url: "",
                        type: "post",
                        beforeSend: function(jqXhr, settings) {
                            id = -1
                            if ($("form#product input#product_id").length) {
                                id = $("form#product input#product_id").val()
                            }
                            settings.url = proxyPath + "validate/product/" + id + "/casnumber/";
                        },
                        data: {
                            casnumber: function() {
                                return $('select#casnumber').select2('data')[0].text;
                            },
                            product_specificity:  function() {
                                return $('#product_specificity').val();
                            },
                        },
                    },
                },
                cenumber: {
                    remote: {
                        url: "",
                        type: "post",
                        beforeSend: function(jqXhr, settings) {
                            id = -1
                            if ($("form#product input#product_id").length) {
                                id = $("form#product input#product_id").val()
                            }
                            settings.url = proxyPath + "validate/product/" + id + "/cenumber/";
                        },
                        data: {
                            cenumber: function() {
                                return $('select#cenumber').select2('data')[0].text;
                            },
                        },
                    },
                },
            },
        });

        //
        // search form
        //
       $('select#s_storelocation').select2({
            templateResult: formatStorelocation,
            placeholder: "store location",
            ajax: {
                url: proxyPath + 'storelocations',
                delay: 400,
                    data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.storelocation_fullpath;
                        obj.id = obj.id || obj.storelocation_id.Int64;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-s_storelocation-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });
        $('select#s_casnumber').select2({
            tags: false,
            allowClear: true,
            placeholder: "select a cas number",
            ajax: {
                url: proxyPath + 'products/casnumbers/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.casnumber_label;
                        obj.id = obj.id || obj.casnumber_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-s_casnumber-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

        $('select#s_name').select2({
            tags: false,
            allowClear: true,
            placeholder: "select a name",
            ajax: {
                url: proxyPath + 'products/names/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.name_label;
                        obj.id = obj.id || obj.name_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-s_name-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

        $('select#s_empiricalformula').select2({
            tags: false,
            allowClear: true,
            placeholder: "select a formula",
            ajax: {
                url: proxyPath + 'products/empiricalformulas/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.empiricalformula_label;
                        obj.id = obj.id || obj.empiricalformula_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-s_empiricalformula-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

        $('select#s_signalword').select2({
            templateResult: formatSignalWord,
            allowClear: true,
            placeholder: "select signal word",
            ajax: {
                url: proxyPath + 'products/signalwords/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.signalword_label.String;
                        obj.id = obj.id || obj.signalword_id.Int64;
                        return obj;
                    });
                        return {
                        results: newdata,
                    };
                }
            }
        });

        $('select#s_symbols').select2({
            templateResult: formatSymbol,
            closeOnSelect: false,
            ajax: {
                url: proxyPath + 'products/symbols/',
                delay: 400,
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.symbol_label;
                        obj.id = obj.id || obj.symbol_id;
                        return obj;
                    });
                        return {
                        results: newdata,
                    };
                }
            }
        });

        $('select#s_hazardstatements').select2({
            templateResult: formatHazardStatement,
            closeOnSelect: false,
            ajax: {
                url: proxyPath + 'products/hazardstatements/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.hazardstatement_reference;
                        obj.id = obj.id || obj.hazardstatement_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-hazardstatements-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

        $('select#s_precautionarystatements').select2({
            templateResult: formatPrecautionaryStatement,
            closeOnSelect: false,
            ajax: {
                url: proxyPath + 'products/precautionarystatements/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.precautionarystatement_reference;
                        obj.id = obj.id || obj.precautionarystatement_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-precautionarystatements-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

        //
        // store locations selector select2
        //
        $('select#storelocationselector').select2({
            templateResult: formatStorelocation,
            placeholder: "direct store location access",
            ajax: {
                url: proxyPath + 'storelocations',
                delay: 400,
                    data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.storelocation_fullpath;
                        obj.id = obj.id || obj.storelocation_id.Int64;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-storelocationselector-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("select2:select", function (e) {
            var data = e.params.data;
            var slid = data.storelocation_id.Int64;
            window.location.href = proxyPath + "v/products?storelocation=" + slid;
        });

        //
        // casnumber select2
        //
        $('select#casnumber').select2({
            tags: true,
            createTag: function (params) {
                if ($("input#exactMatchCasNumber").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            ajax: {
                url: proxyPath + 'products/casnumbers/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {

                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchCasNumber").val("true");
                    } else {
                        $("input#exactMatchCasNumber").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.casnumber_label;
                        obj.id = obj.id || obj.casnumber_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-casnumber-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // cenumber select2
        //
        $('select#cenumber').select2({
            tags: true,
            allowClear: true,
            createTag: function (params) {
                if ($("input#exactMatchCeNumber").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            placeholder: "select or enter a CE number",
            ajax: {
                url: proxyPath + 'products/cenumbers/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchCeNumber").val("true");
                    } else {
                        $("input#exactMatchCeNumber").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.cenumber_label.String;
                        obj.id = obj.id || obj.cenumber_id.Int64;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-cenumber-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // physicalstate select2
        //
        $('select#physicalstate').select2({
            allowClear: true,
            tags: true,
            createTag: function (params) {
                if ($("input#exactMatchPhysicalstate").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            placeholder: "select physical state",
            ajax: {
                url: proxyPath + 'products/physicalstates/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchPhysicalstate").val("true");
                    } else {
                        $("input#exactMatchPhysicalstate").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.physicalstate_label.String;
                        obj.id = obj.id || obj.physicalstate_id.Int64;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-physicalstate-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // signalword select2
        //
        $('select#signalword').select2({
            templateResult: formatSignalWord,
            allowClear: true,
            placeholder: "select signal word",
            ajax: {
                url: proxyPath + 'products/signalwords/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.signalword_label.String;
                        obj.id = obj.id || obj.signalword_id.Int64;
                        return obj;
                    });
                        return {
                        results: newdata,
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // classofcompound select2
        //
        $('select#classofcompound').select2({
            allowClear: true,
            tags: true,
            createTag: function (params) {
                if ($("input#exactMatchClassofcompounds").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            placeholder: "select class of compound",
            ajax: {
                url: proxyPath + 'products/classofcompounds/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchClassofcompounds").val("true");
                    } else {
                        $("input#exactMatchClassofcompounds").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.classofcompound_label.String;
                        obj.id = obj.id || obj.classofcompound_id.Int64;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-classofcompounds-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // name select2
        //
        $('select#name').select2({
            tags: true,
            createTag: function (params) {
                if ($("input#exactMatchName").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            ajax: {
                url: proxyPath + 'products/names/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {

                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchName").val("true");
                    } else {
                        $("input#exactMatchName").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.name_label;
                        obj.id = obj.id || obj.name_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-name-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // empirical formula select2
        //
        $('select#empiricalformula').select2({
            tags: true,
            createTag: function (params) {
                if ($("input#exactMatchEmpiricalFormula").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            ajax: {
                url: proxyPath + 'products/empiricalformulas/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {

                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchEmpiricalFormula").val("true");
                    } else {
                        $("input#exactMatchEmpiricalFormula").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.empiricalformula_label;
                        obj.id = obj.id || obj.empiricalformula_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-empiricalformula-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // linear formula select2
        //
        $('select#linearformula').select2({
            tags: true,
            allowClear: true,
            createTag: function (params) {
                if ($("input#exactMatchLinearFormula").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            placeholder: "select or enter a linear formula",
            ajax: {
                url: proxyPath + 'products/linearformulas/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {

                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchLinearFormula").val("true");
                    } else {
                        $("input#exactMatchLinearFormula").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.linearformula_label.String;
                        obj.id = obj.id || obj.linearformula_id.Int64;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-linearformula-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        }).on("change", function (e) {
            $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
        });

        //
        // synonyms select2
        //
        $('select#synonyms').select2({
            tags: true,
            createTag: function (params) {
                if ($("input#exactMatchSynonyms").val() == "true") {
                    return null
                }
                return {
                    id: params.term,
                    text: params.term,
                }
            },
            ajax: {
                url: proxyPath + 'products/synonyms/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {

                    isExactMatch=false;
                    
                    // looking for an exact match
                    $.each(data.rows, function( index, value ) {
                        if(value.c == 1) {
                            isExactMatch=true;
                        }
                    });
                    
                    // there is a match: setting the input field
                    if (isExactMatch) {
                        $("input#exactMatchSynonyms").val("true");
                    } else {
                        $("input#exactMatchSynonyms").val("false");
                    }

                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.name_label;
                        obj.id = obj.id || obj.name_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-synonyms-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

        //
        // symbols select2
        //
        $('select#symbols').select2({
            templateResult: formatSymbol,
            closeOnSelect: false,
            ajax: {
                url: proxyPath + 'products/symbols/',
                delay: 400,
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.symbol_label;
                        obj.id = obj.id || obj.symbol_id;
                        return obj;
                    });
                        return {
                        results: newdata,
                    };
                }
            }
        });

        //
        // hazardstatements select2
        //
        $('select#hazardstatements').select2({
            templateResult: formatHazardStatement,
            closeOnSelect: false,
            ajax: {
                url: proxyPath + 'products/hazardstatements/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.hazardstatement_reference;
                        obj.id = obj.id || obj.hazardstatement_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-hazardstatements-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

        //
        // precautionarystatements select2
        //
        $('select#precautionarystatements').select2({
            templateResult: formatPrecautionaryStatement,
            closeOnSelect: false,
            ajax: {
                url: proxyPath + 'products/precautionarystatements/',
                delay: 400,
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        offset: (params.page-1)*10 || 0,
                        limit: 10
                    }

                    // Query parameters will be ?search=[term]&page=[page]
                    return query;
                },
                dataType: 'json',
                processResults: function (data) {
                    // replacing name by text expected by select2
                    var newdata = $.map(data.rows, function (obj) {
                        obj.text = obj.text || obj.precautionarystatement_reference;
                        obj.id = obj.id || obj.precautionarystatement_id;
                        return obj;
                    });
                    // getting the number of loaded select elements
                    selectnbitems = $("ul#select2-precautionarystatements-results li").length + 10;

                    return {
                        results: newdata,
                        pagination: {more: selectnbitems<data.total}
                    };
                }
            }
        });

    });


    //
    // mol file selector
    //
    $('#product_molformula').change( function () {
		if ( ! window.FileReader ) {
			return alert( 'FileReader API is not supported by your browser.' );
		}
        molfile = $('#product_molformula')[0];
        if ( molfile.files && molfile.files[0] ) {
			file = molfile.files[0]; // The file
			fr = new FileReader(); // FileReader instance
            fr.onload = function () {
                $('#hidden_product_molformula_content').append(fr.result);
            };
			fr.readAsText(file);
		} else {
			// Handle errors here
			alert( "File not selected or browser incompatible." )
		}
    });

    //
    // store location select2 formatter
    //
    function formatStorelocation (sl) {
        if (!sl.storelocation_id) {
            return sl.storelocation_fullpath;
        }
        var canstore = '<span class="mdi mdi-close"></span>';
        var icon = '<span class="mdi mdi-gesture" style="color: ' + sl.storelocation_color.String + ';"></span>';
        if (sl.storelocation_canstore.Valid && sl.storelocation_canstore.Bool) {
            canstore = '<span class="mdi mdi-check"></span>'
        }
        var s = $(
            '<div>' + icon + '<span>' + sl.storelocation_fullpath + '</span>' + canstore + '</div>'
        );
        return s;
    };
    //
    // signalwords select2 formatter
    //
    function formatSignalWord (signalword) {
        if (!signalword.signalword_id) {
            return signalword.signalword_label;
        }
        if (signalword.signalword_id.Valid) {
            return signalword.signalword_label.String;
        }
    };
    //
    // symbols select2 formatter
    //
    function formatSymbol (symbol) {
        if (!symbol.symbol_id) {
            return symbol.symbol_label;
        }
        var s = $(
            '<span><img src="data:' + symbol.symbol_image + '" title="' + symbol.symbol_label + '" /> ' + symbol.symbol_label + '</span>'
        );
        return s;
    };
    //
    // precautionary statements select2 formatter
    //
    function formatPrecautionaryStatement (ps) {
        if (!ps.precautionarystatement_id) {
            return ps.precautionarystatement_label;
        }
        var s = $(
            '<span><b>' + ps.precautionarystatement_reference + '</b> ' + ps.precautionarystatement_label + '</span>'
        );
        return s;
    };
    //
    // hazard statements select2 formatter
    //
    function formatHazardStatement (hs) {
        if (!hs.hazardstatement_id) {
            return hs.hazardstatement_label;
        }
        var s = $(
            '<span><b>' + hs.hazardstatement_reference + '</b> ' + hs.hazardstatement_label + '</span>'
        );
        return s;
    };

    //
    // save store location callback
    //
    var createCallBack = function createCallback(data, textStatus, jqXHR) {
        global.displayMessage("product " + data.name.name_label + " created", "success");
        setTimeout(function(){ window.location = proxyPath + "v/products?product="+data.product_id+"&hl="+data.product_id; }, 1000);
    }
    var updateCallBack = function updateCallback(data, textStatus, jqXHR) {
        global.displayMessage("product " + data.name.name_label + " updated", "success");
        setTimeout(function(){ window.location = proxyPath + "v/products?product="+data.product_id+"&hl="+data.product_id; }, 1000);
    }
    function saveProduct() {
        var form = $("#product");
        if (! form.valid()) {
            return;
        };

        var product_id = $("input#product_id").val(),
            product_specificity = $("input#product_specificity").val(),
            product_threedformula = $("input#product_threedformula").val(),

            product_molformula = $("#hidden_product_molformula_content").html(),

            product_msds = $("input#product_msds").val(),
            product_disposalcomment = $("textarea#product_disposalcomment").val(),
            product_remark = $("textarea#product_remark").val(),
            product_restricted = $("input#product_restricted:CHECKED").val(),
            product_radioactive = $("input#product_radioactive:CHECKED").val(),
            casnumber = $('select#casnumber').select2('data')[0],
            cenumber = $('select#cenumber').select2('data')[0],
            empiricalformula = $('select#empiricalformula').select2('data')[0],
            linearformula = $('select#linearformula').select2('data')[0],
            name_ = $('select#name').select2('data')[0],
            physicalstate = $('select#physicalstate').select2('data')[0],
            signalword = $('select#signalword').select2('data')[0],
            classofcompound = $('select#classofcompound').select2('data')[0],
            synonyms = $('select#synonyms').select2('data'),
            symbols = $('select#symbols').select2('data'),
            hazardstatements = $('select#hazardstatements').select2('data'),
            precautionarystatements = $('select#precautionarystatements').select2('data'),
            ajax_url = proxyPath + "products",
            ajax_method = "POST",
            ajax_callback = createCallBack,
            data = {};

            if ($("form#product input#product_id").length) {
                ajax_url = proxyPath + "products/" + product_id
                ajax_method = "PUT"
                ajax_callback = updateCallBack
            }

            $.each(symbols, function( index, s ) {
                data["symbols." + index +".symbol_id"] = s.id;
                data["symbols." + index +".symbol_label"] = s.text;
            });
            $.each(synonyms, function( index, s ) {
                data["synonyms." + index +".name_id"] = s.id == s.text ? -1 : s.id;
                data["synonyms." + index +".name_label"] = s.text;
            });
            $.each(hazardstatements, function( index, s ) {
                data["hazardstatements." + index +".hazardstatement_id"] = s.id;
                data["hazardstatements." + index +".hazardstatement_reference"] = s.text;
            });
            $.each(precautionarystatements, function( index, s ) {
                data["precautionarystatements." + index +".precautionarystatement_id"] = s.id;
                data["precautionarystatements." + index +".precautionarystatement_reference"] = s.text;
            });
            $.extend(data, {
                "product_id": product_id,
                "product_disposalcomment": product_disposalcomment,
                "product_remark": product_remark,
                "product_restricted": product_restricted == "on" ? true : false,
                "product_radioactive": product_radioactive == "on" ? true : false,
                "casnumber.casnumber_id": casnumber.id == casnumber.text ? -1 : casnumber.id,
                "casnumber.casnumber_label": casnumber.text,
                "empiricalformula.empiricalformula_id": empiricalformula.id == empiricalformula.text ? -1 : empiricalformula.id,
                "empiricalformula.empiricalformula_label": empiricalformula.text,
                "name.name_id": name_.id == name_.text ? -1 : name_.id,
                "name.name_label": name_.text,
            });
            if (product_molformula !== "") {
                $.extend(data, {
                    "product_molformula": product_molformula,
                });  
            }
            if (product_specificity !== "") {
                $.extend(data, {
                    "product_specificity": product_specificity,
                });                    
            }
            if (product_msds !== "") {
                $.extend(data, {
                    "product_msds": product_msds,
                });                    
            } 
            if (product_threedformula !== "") {
                $.extend(data, {
                    "product_threedformula": product_threedformula,
                });                    
            } 
            if (cenumber !== undefined) {
                $.extend(data, {
                    "cenumber.cenumber_id": cenumber.id == cenumber.text ? -1 : cenumber.id,
                    "cenumber.cenumber_label": cenumber === undefined ? "" : cenumber.text,
                });                    
            }
            if (physicalstate !== undefined) {
                $.extend(data, {
                    "physicalstate.physicalstate_id": physicalstate.id == physicalstate.text ? -1 : physicalstate.id,
                    "physicalstate.physicalstate_label": physicalstate.text,
                });                    
            }
            if (signalword !== undefined) {
                $.extend(data, {
                    "signalword.signalword_id": signalword.id == signalword.text ? -1 : signalword.id,
                    "signalword.signalword_label": signalword.text,
                });                    
            }
            if (classofcompound !== undefined) {
                $.extend(data, {
                    "classofcompound.classofcompound_id": classofcompound.id == classofcompound.text ? -1 : classofcompound.id,
                    "classofcompound.classofcompound_label": classofcompound.text,
                });                    
            }
            if (linearformula !== undefined) {
                $.extend(data, {
                    "linearformula.linearformula_id": linearformula.id == linearformula.text ? -1 : linearformula.id,
                    "linearformula.linearformula_label": linearformula.text,
                });                    
            } 
            $.ajax({
                url: ajax_url,
                method: ajax_method,
                dataType: 'json',
                data: data,
            }).done(ajax_callback).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });  
        }

    //
    // magical selector
    //
    function magic() {
        var m = $('textarea#magical').val();
        if (m != "") {
            $.ajax({
                url: proxyPath + "products/magic",
                method: "POST",
                data: {"msds": m}
            }).done(function(data, textStatus, jqXHR) {
                $('select#hazardstatements').val(null).trigger('change');
                $('select#hazardstatements').find('option').remove();
                $('select#precautionarystatements').val(null).trigger('change');
                $('select#precautionarystatements').find('option').remove();
                
                var hs = data.hs,
                    ps = data.ps;
                for(var i= 0; i < hs.length; i++)
                {
                   var newOption = new Option(data.hs[i].hazardstatement_reference, data.hs[i].hazardstatement_id, true, true);
                   $('select#hazardstatements').append(newOption).trigger('change');
                }
                for(var i= 0; i < ps.length; i++)
                {
                   var newOption = new Option(data.ps[i].precautionarystatement_reference, data.ps[i].precautionarystatement_id, true, true);
                   $('select#precautionarystatements').append(newOption).trigger('change');
                }
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
        }
    }

    //
    // linear to empirical formula converter
    //
    function linearToEmpirical() {
        var f = $('select#linearformula').select2('data')[0].text;
        if (f != "") {
            $.ajax({
                url: proxyPath + "products/l2eformula/" + f,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                $("#fconverter").attr("data-content", data);
                $("#fconverter").popover('show');
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
        }
    }</script></body></html>`
	create_5__186 = `"><span class="`
	create_5__188 = `"></span></label></div>`
)

func Productcreate(c ViewContainer, wr io.Writer) {
	buffer := &WriterAsBuffer{wr}

	buffer.WriteString(index__0)
	WriteAll(c.ProxyPath+"css/bootstrap.min.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/bootstrap-table.min.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/select2.min.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/bootstrap-colorpicker.min.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/fontawesome.all.min.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/chimitheque.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/materialdesignicons.min.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/bootstrap-toggle.min.css", true, buffer)
	buffer.WriteString(index__1)
	WriteAll(c.ProxyPath+"css/animate.min.css", true, buffer)
	buffer.WriteString(index__9)
	WriteAll(c.ProxyPath+"js/jquery-3.3.1.min.js", true, buffer)
	buffer.WriteString(index__10)
	WriteAll(c.ProxyPath+"img/logo_chimitheque_small.png", true, buffer)
	buffer.WriteString(index__11)

	if HasPermission(c.PersonID, "r", "products", -2) {
		buffer.WriteString(index__35)
		WriteAll(c.ProxyPath+"v/products", true, buffer)
		buffer.WriteString(index__36)
		WriteAll(T("menu_home", 1), true, buffer)
		buffer.WriteString(index__37)

	}
	if HasPermission(c.PersonID, "r", "products", -2) {
		buffer.WriteString(index__35)
		WriteAll(c.ProxyPath+"v/products?bookmark=true", true, buffer)
		buffer.WriteString(index__39)
		WriteAll(T("menu_bookmark", 1), true, buffer)
		buffer.WriteString(index__37)

	}
	if HasPermission(c.PersonID, "w", "products", -2) {
		buffer.WriteString(index__41)
		WriteAll(c.ProxyPath+"vc/products", true, buffer)
		buffer.WriteString(index__42)
		WriteAll(T("menu_create_productcard", 1), true, buffer)
		buffer.WriteString(index__37)

	}
	if HasPermission(c.PersonID, "r", "entities", -2) {
		buffer.WriteString(index__44)
		WriteAll(T("menu_entity", 1), true, buffer)
		buffer.WriteString(index__45)
		WriteAll(c.ProxyPath+"v/entities", true, buffer)
		buffer.WriteString(index__46)

		if HasPermission(c.PersonID, "all", "all", -1) {
			buffer.WriteString(index__48)
			WriteAll(c.ProxyPath+"vc/entities", true, buffer)
			buffer.WriteString(index__49)

		}
		buffer.WriteString(index__47)

	}
	if HasPermission(c.PersonID, "r", "storages", -2) {
		buffer.WriteString(index__50)
		WriteAll(T("menu_storelocation", 1), true, buffer)
		buffer.WriteString(index__45)
		WriteAll(c.ProxyPath+"v/storelocations", true, buffer)
		buffer.WriteString(index__46)

		if HasPermission(c.PersonID, "all", "all", -2) {
			buffer.WriteString(index__48)
			WriteAll(c.ProxyPath+"vc/storelocations", true, buffer)
			buffer.WriteString(index__49)

		}
		buffer.WriteString(index__47)

	}
	if HasPermission(c.PersonID, "r", "people", -2) {
		buffer.WriteString(index__56)
		WriteAll(T("menu_people", 1), true, buffer)
		buffer.WriteString(index__45)
		WriteAll(c.ProxyPath+"v/people", true, buffer)
		buffer.WriteString(index__46)

		if HasPermission(c.PersonID, "w", "people", -2) {
			buffer.WriteString(index__48)
			WriteAll(c.ProxyPath+"vc/people", true, buffer)
			buffer.WriteString(index__49)

		}
		buffer.WriteString(index__47)

	}
	buffer.WriteString(index__12)
	WriteAll(c.ProxyPath+"vu/peoplepass", true, buffer)
	buffer.WriteString(index__13)
	WriteAll(T("menu_password", 1), true, buffer)
	buffer.WriteString(index__14)
	WriteAll(c.ProxyPath+"delete-token", true, buffer)
	buffer.WriteString(index__15)
	WriteAll(T("menu_logout", 1), true, buffer)
	buffer.WriteString(create__16)

	{
		var (
			iconitem   = "creation"
			iconaction = "tag"
			label      = "create product"
		)

		buffer.WriteString(index_2__68)
		WriteEscString("mdi-"+iconitem+" mdi mdi-48px", buffer)
		buffer.WriteString(index_2__69)
		WriteEscString("mdi-"+iconaction+" mdi mdi-18px", buffer)
		buffer.WriteString(index_2__70)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__71)

	}

	buffer.WriteString(create_5__17)

	{
		var (
			label = "name"
			name  = "name"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(index_4__36)

	{
		var (
			label = "synonym(s)"
			name  = "synonyms"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__88)

	}

	buffer.WriteString(index_4__37)

	{
		var (
			label = "specificity"
			name  = "product_specificity"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__74)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__77)
	}

	buffer.WriteString(create_5__20)

	{
		var (
			label = "empirical formula"
			name  = "empiricalformula"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(index_4__36)

	{
		var (
			label = "linear formula"
			name  = "linearformula"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(create_5__22)

	{
		var (
			label = "cas number"
			name  = "casnumber"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(index_4__36)

	{
		var (
			label = "ce number"
			name  = "cenumber"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(index_4__37)

	{
		var (
			label = "MSDS link"
			name  = "product_msds"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__74)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__77)
	}

	buffer.WriteString(index_4__25)

	{
		var (
			label = "3D formula link"
			name  = "product_threedformula"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__74)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__77)
	}

	buffer.WriteString(index_4__24)

	{
		var (
			label = "3D formula mol file"
			name  = "product_molformula"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_4__236)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__77)
	}

	{
		var (
			name  = "product_molformula_content"
			value = ""
		)

		buffer.WriteString(index_4__103)
		WriteEscString("hidden_"+name, buffer)
		buffer.WriteString(index_4__104)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__105)
		WriteEscString(value, buffer)
		buffer.WriteString(index_4__106)
	}

	buffer.WriteString(index_4__25)

	{
		var (
			label = "physical state"
			name  = "physicalstate"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(index_4__24)

	{
		var (
			label = "class of compound"
			name  = "classofcompound"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(create_5__29)

	{
		var (
			label = "magical selector"
			name  = "magical"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_4__284)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__287)

	}

	buffer.WriteString(create_5__30)

	{
		var (
			label = "signal word"
			name  = "signalword"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__162)

	}

	buffer.WriteString(index_4__24)

	{
		var (
			label = "symbol(s)"
			name  = "symbols"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__88)

	}

	buffer.WriteString(index_4__25)

	{
		var (
			label = "hazard statement(s)"
			name  = "hazardstatements"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__88)

	}

	buffer.WriteString(index_4__24)

	{
		var (
			label = "precautionary statement(s)"
			name  = "precautionarystatements"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_2__86)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__88)

	}

	buffer.WriteString(index_4__37)

	{
		var (
			title = "restricted access"
			name  = "product_restricted"
			icon  = "mdi-hand"
		)

		buffer.WriteString(index_4__178)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(title, buffer)
		buffer.WriteString(index_4__179)
		WriteEscString(name, buffer)
		buffer.WriteString(create_5__186)
		WriteEscString("mdi mdi-36px "+icon, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(title, buffer)
		buffer.WriteString(create_5__188)

	}

	buffer.WriteString(index_4__37)

	{
		var (
			title = "radioactive"
			name  = "product_radioactive"
			icon  = "mdi-radioactive"
		)

		buffer.WriteString(index_4__178)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(title, buffer)
		buffer.WriteString(index_4__179)
		WriteEscString(name, buffer)
		buffer.WriteString(create_5__186)
		WriteEscString("mdi mdi-36px "+icon, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(title, buffer)
		buffer.WriteString(create_5__188)

	}

	buffer.WriteString(index_4__37)

	{
		var (
			label = "disposal comment"
			name  = "product_disposalcomment"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_4__284)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__287)

	}

	buffer.WriteString(index_4__37)

	{
		var (
			label = "remark"
			name  = "product_remark"
		)

		buffer.WriteString(index_2__72)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__73)
		WriteEscString(label, buffer)
		buffer.WriteString(index_4__284)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__75)
		WriteEscString(name, buffer)
		buffer.WriteString(index_2__76)
		WriteEscString(name, buffer)
		buffer.WriteString(index_4__287)

	}

	buffer.WriteString(index_4__55)
	WriteAll(T("save", 1), true, buffer)
	buffer.WriteString(create_5__39)

	json, _ := json.Marshal(c)

	var out string
	for key, value := range c.URLValues {
		out += fmt.Sprintf("URLValues.set(%s, %s)\n", key, value)
	}

	buffer.WriteString(index__17)
	WriteAll(c.ProxyPath, false, buffer)
	buffer.WriteString(index__18)
	buffer.WriteString(fmt.Sprintf("%s", json))
	buffer.WriteString(index__19)
	buffer.WriteString(out)
	buffer.WriteString(index__20)
	WriteAll(c.ProxyPath+"js/jquery.formautofill.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/jquery.validate.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/jquery.validate.additional-methods.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/select2.full.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/popper.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/bootstrap.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/bootstrap-table.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/bootstrap-confirmation.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/bootstrap-colorpicker.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/bootstrap-toggle.min.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/JSmol.lite.nojq.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/chim/gjs-common.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/chim/chimcommon.js", true, buffer)
	buffer.WriteString(index__21)
	WriteAll(c.ProxyPath+"js/chim/login.js", true, buffer)
	buffer.WriteString(create_5__57)

}
