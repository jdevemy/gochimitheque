extends static/templates/base.jade

block content
    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-side-pagination='server', 
                                data-page-list="[10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-query-params='queryParams'
                                data-sort-name='person_email')
                        thead
                            tr
                                th(data-field='person_id' data-sortable='true') ID
                                th(data-field='person_email' data-sortable='true') email
                                th(data-field='operate', data-formatter='operateFormatter', data-events='operateEvents') actions

        #viewedit-collapse.collapse(data-parent='#accordion')
            form#person-update
                input#index(type='hidden', name='index', value='')
                input#person_id(type='hidden', name='person_id', value='')

                .form-group.row
                    | {{$label := "email"}} {{$name := "person_email"}}
                    +inputtext
                .form-group.row
                    | {{$label := "entity(ies)"}} {{$name := "entities"}}
                    +selectmultiple
                .form-group.row#permissions

            button#save.btn.btn-primary(type='button', onclick='savePerson()') save changes
            button.btn.btn-secondary(type='button', onclick='closeView();') close

block contentjs
    script.
        
        var URLValues = new Map();

        // initializing query parameters map
        {{ range $key, $value := .URLValues }}
            URLValues.set({{ $key }}, {{ $value }});
        {{ end }}

        $( document ).ready(function() {

            // populating search input if needed
            if (URLValues.has("search")) {
                $('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
            }

            //
            // manager select2
            //
            $('select#entities').select2({
                dropdownParent: $('#viewedit-collapse'),
                ajax: {
                    url: '/entities',
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing email by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.entity_name;
                            obj.id = obj.id || obj.entity_id;
                            return obj;
                        });
                        return {
                            results: newdata
                        };
                    }
                }
            });
            $('select#entities').on('select2:unselecting', function (e) {
                var ismanager = false;
                var data = e.params.args.data,
                    entityid = data.id,
                    entityname = data.text;
                
                // preventing unselecting entity if the person is one its manager
                manageentities = $("input.manageentities")
                $.each(manageentities, function( index, e ) {
                    if ($(e).val() == entityid) {
                        ismanager = true;
                    }
                });
                if (ismanager) {
                    // FIXME: do we have to do something on the server side to check this?
                    displayMessage("this entity can not be removed, the user is one of its manager", "success");
                    e.preventDefault();
                } else {
                    // removing permissions widget
                    $("#perm" + data.id).remove();
                }
            });
            $('select#entities').on('select2:select', function (e) {
                var data = e.params.data;
                
                // adding permissions widget
                $("#permissions").append(global.buildPermissionWidget(data.entity_id, data.entity_name));
            });
        });

        //
        // close buttons actions
        //
        function closeView() { $("#list-collapse").collapse("show"); $("#viewedit-collapse").collapse("hide"); }

        //
        // update form validation
        //
        $( "#person-update" ).validate({
            errorClass: "alert alert-danger",
            rules: {
                person_email: {
                    required: true,
                    email: true,
                    remote: {
                        url: "",
                        type: "post",
                        beforeSend: function(jqXhr, settings) {
                            settings.url = "/validate/person/" + $("form#person-update input#person_id").val() + "/email/";
                        },
                    },
                },
            },
        });

        //
        // save person callback
        //
        function savePerson() {
            var form = $("#person-update");
            if (! form.valid()) {
                return;
            };

            var person_id = $("#viewedit-collapse input#person_id").val(),
                person_email = $("#viewedit-collapse input#person_email").val(),
                entities = $('select#entities').select2('data');
                permissions = $("input[type=radio]:checked");
                data = {};
                $.each(permissions, function( index, e ) {
                    data["permissions." + index +".permission_perm_name"] = $(e).attr("perm_name");
                    data["permissions." + index +".permission_item_name"] = $(e).attr("item_name");
                    data["permissions." + index +".permission_entity_id"] = $(e).attr("entity_id");
                });               
                $.each(entities, function( index, e ) {
                    data["entities." + index +".entity_id"] = e.id;
                    data["entities." + index +".entity_name"] = e.text;
                });
                $.extend(data, {
                        "person_id": person_id,
                        "person_email": person_email,
                });
                $.ajax({
                    url: "/people/" + person_id,
                    method: "PUT",
                    dataType: 'json',
                    data: data,
                }).done(function(data, textStatus, jqXHR) {
                    $('#list-collapse').collapse('show');
                    $('#viewedit-collapse').collapse('hide');
                    var $table = $('#table');
                    var index = $('input#index').val();
                    $table.bootstrapTable('updateRow', {
                        index: index,
                        row: {
                            "person_email": person_email,
                        }
                    });
                    displayMessage("person " + person_email + " updated", "success");
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });  
        }

        //
        // table data loading
        //
        function queryParams(params) {
            if (URLValues.has("entity")) {
                params["entity"] = URLValues.get("entity")[0];
            }
            return params;
        }
        function getData(params) {
                $.ajax({
                    url: "/people",
                    method: "GET",
                    dataType: "JSON",
                    data: params.data,
                }).done(function(data, textStatus, jqXHR) {
                    params.success({
                        rows: data.rows,
                        total: data.total,
                    });
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    params.error(jqXHR.statusText);                
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });           
        }

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            eid = row.person_id
            hasPermission("/f/people/" + eid, "GET", eid).done(function(){
                     $("#view"+this.itemId).fadeIn();
            })
            hasPermission("/f/people/" + eid, "PUT", eid).done(function(){
                    $("#edit"+this.itemId).fadeIn();
            })
            hasPermission("/f/people/" + eid, "DELETE", eid).done(function(){
                    $("#delete"+this.itemId).fadeIn();
            })

            // buttons are hidden by default
            var actions = [
            '<button id="view' + eid + '" class="view btn btn-secondary" style="display: none;" title="view" type="button">',
                '<i class="fas fa-eye"></i>',
            '</button>',
            '<button id="edit' + eid + '" class="edit btn btn-secondary" style="display: none;" title="edit" type="button">',
                '<i class="fas fa-edit"></i>',
            '</button>',
            '<button id="delete' + eid + '" class="delete btn btn-secondary" style="display: none;" title="delete" type="button">',
                '<i class="fas fa-trash-alt"></i>',
            '</button>'];

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEditView(e, value, row, index) {
            // clearing selections
            $('select#entities').val(null).trigger('change');
            $('select#entities').find('option').remove();

            var persondata,
                managedentitydata,
                entitydata,
                permissiondata;
            var managedentitydataids;

            // getting the person
            personpromise = $.ajax({
                url: "/people/" + row['person_id'],
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done personpromise");
                persondata = data;
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // getting the entities the person is manager of
            managerpromise = $.ajax({
                url: "/people/" + row['person_id'] + "/manageentities",
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done managerpromise");
                managedentitydata = data;
                if (data != null) {
                    managedentitydataids = data.map(function(a) {return a.entity_id;});
                } else {
                    managedentitydataids = [];
                }
            });

            // getting the person permissions
            permissionpromise = $.ajax({
                url: "/people/" + row['person_id'] + "/permissions",
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done permissionpromise");
                permissiondata = data;
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // getting the person entities
            entitypromise = $.ajax({
                url: "/people/" + row['person_id'] + "/entities",
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done entitypromise");
                entitydata = data;
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            $.when(personpromise, managerpromise, entitypromise, permissionpromise).done(function(firstData, secondData) {
                // flattening person response data
                fdata = flatten(persondata);
                // autofilling form
                $("#viewedit-collapse").autofill( fdata, {"findbyname": false } );
                // setting index hidden input
                $("input#index").val(index);

                // appending managed entities in hidden inputs for further use
                $("input.manageentities").remove();
                for(var i in managedentitydata) {
                   var newOption = $("<input></input>");
                   newOption.addClass("manageentities");
                   newOption.attr("type", "hidden");
                   newOption.val(managedentitydata[i].entity_id);
                   $('form#person-update').append(newOption);
                }

                // populating the entities select2
                for(var i in entitydata) {
                   var newOption = new Option(entitydata[i].entity_name, entitydata[i].entity_id, true, true);
                   $('select#entities').append(newOption).trigger('change');
                }
                // adding a permission widget for each entity
                // except for managed entities
                $("#permissions").empty();
                for(var i in entitydata) {
                    if ($.inArray(entitydata[i].entity_id, managedentitydataids) == -1){
                        $("#permissions").append(global.buildPermissionWidget(entitydata[i].entity_id, entitydata[i].entity_name));
                    }
                }

                // populating the permissions widget
                if ($("input.perm").length > 0) {
                    if (permissiondata == null) {
                        permissiondata = [];
                    }
                    global.populatePermissionWidget(permissiondata);
                }

                // disabling or enabling the widgets
                if ($(e.target).hasClass("view")) {
                    $("#viewedit-collapse").find("input").prop("disabled", true);
                    $("#viewedit-collapse").find("select").prop("disabled", true);
                    $("#viewedit-collapse").find("button#save").hide();
                } else {
                    $("#viewedit-collapse").find("input").prop("disabled", false);
                    $("#viewedit-collapse").find("select").prop("disabled", false);
                    $("#viewedit-collapse").find("button#save").show();
                }

                // finally collapsing the view
                $('#viewedit-collapse').collapse('show');
                $('#list-collapse').collapse('hide');
            });
        }

        // items actions callback
        window.operateEvents = {
            'click .view': function (e, value, row, index) {
                operateEditView(e, value, row, index)
            },
            'click .edit': function (e, value, row, index) {
                operateEditView(e, value, row, index)
            },
            'click .delete': function (e, value, row, index) {
                // hidding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: "/people/" + row['person_id'],
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        displayMessage("person deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
