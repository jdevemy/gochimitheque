| {{define "CONTENT"}}
    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-side-pagination='server', 
                                data-page-list="[10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-query-params='queryParams'
                                data-sort-name='person_email')
                        thead
                            tr
                                th(data-field='person_id' data-sortable='true') ID
                                th(data-field='person_email' data-sortable='true') email
                                th(data-field='operate', data-formatter='operateFormatter', data-events='operateEvents') actions

        #viewedit-collapse.collapse(data-parent='#accordion')
            form#person
                input#index(type='hidden', name='index', value='')
                input#person_id(type='hidden', name='person_id', value='')

                .form-group.row
                    | {{$label := "email"}} {{$name := "person_email"}}
                    +inputtext
                .form-group.row
                    | {{$label := "entity(ies)"}} {{$name := "entities"}}
                    +selectmultiple
                .form-group.row#permissionsproducts
                        .col-sm-6
                            .alert.alert-primary products
                        .col-sm-6
                            .form-check.form-check-inline
                                input.perm.permn.permnproducts#permnproducts-1(name="permproducts-1" value="none" label="_" perm_name="n" item_name="products" entity_id="-1" type="radio")
                                label.form-check-label(for="permproducts-1") _
                            .form-check.form-check-inline
                                input.perm.permr.permrproducts#permrproducts-1(name="permproducts-1" value="none" label="r" perm_name="r" item_name="products" entity_id="-1" type="radio")
                                label.form-check-label(for="permrproducts-1") r
                            .form-check.form-check-inline
                                input.perm.permw.permwproducts#permwproducts-1(name="permproducts-1" value="none" label="w" perm_name="w" item_name="products" entity_id="-1" type="radio")
                                label.form-check-label(for="permwproducts-1") w
                .form-group.row#permissionsrproducts
                        .col-sm-6
                            .alert.alert-primary restricted products
                        .col-sm-6
                            .form-check.form-check-inline
                                input.perm.permn.permnrproducts#permnrproducts-1(name="permrproducts-1" value="none" label="_" perm_name="n" item_name="rproducts" entity_id="-1" type="radio")
                                label.form-check-label(for="permrproducts-1") _
                            .form-check.form-check-inline
                                input.perm.permr.permrrproducts#permrrproducts-1(name="permrproducts-1" value="none" label="r" perm_name="r" item_name="rproducts" entity_id="-1" type="radio")
                                label.form-check-label(for="permrrproducts-1") r
                            .form-check.form-check-inline
                                input.perm.permw.permwrproducts#permwrproducts-1(name="permrproducts-1" value="none" label="w" perm_name="w" item_name="rproducts" entity_id="-1" type="radio")
                                label.form-check-label(for="permwrproducts-1") w             
                .form-group.row#permissions

            button#save.btn.btn-primary(type='button', onclick='savePerson()') save changes
            button.btn.btn-secondary(type='button', onclick='closeView();') close
| {{end}}
| {{define "CONTENTJS"}}
| {{template "COMMONCONTENTJS"}}
    script.

        $( document ).ready(function() {

            // populating search input if needed
            if (URLValues.has("search")) {
                $('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
            }

        });

        //
        // close buttons actions
        //
        function closeView() { $("#list-collapse").collapse("show"); $("#viewedit-collapse").collapse("hide"); }

        //
        // table data loading
        //
        function queryParams(params) {
            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            if (urlParams.has("entity")) {
                params["entity"] = urlParams.get("entity");
            }
            return params;
        }
        function getData(params) {
                $.ajax({
                    url: proxyPath + "people",
                    method: "GET",
                    dataType: "JSON",
                    data: params.data,
                }).done(function(data, textStatus, jqXHR) {
                    params.success({
                        rows: data.rows,
                        total: data.total,
                    });
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    params.error(jqXHR.statusText);                
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });           
        }

        //
        // when table is loaded
        //
        $('#table').on('load-success.bs.table refresh.bs.table', function () {
            $("button.view").each(function( index, b ) {
                hasPermission("people", $(b).attr("eid"), "GET").done(function(){
                    $("#view"+$(b).attr("eid")).fadeIn();
                    localStorage.setItem("people:" + $(b).attr("eid") + ":GET", true);
                }).fail(function(){
                    localStorage.setItem("people:" + $(b).attr("eid") + ":GET", false);
                })
            });
            $("button.view").each(function( index, b ) {
                hasPermission("people", $(b).attr("eid"), "PUT").done(function(){
                    $("#edit"+$(b).attr("eid")).fadeIn();
                    localStorage.setItem("people:" + $(b).attr("eid") + ":PUT", true);
                }).fail(function(){
                    localStorage.setItem("people:" + $(b).attr("eid") + ":PUT", false);
                })
            });
            $("button.view").each(function( index, b ) {
                hasPermission("people", $(b).attr("eid"), "DELETE").done(function(){
                    $("#delete"+$(b).attr("eid")).fadeIn();
                    localStorage.setItem("people:" + $(b).attr("eid") + ":DELETE", true);
                }).fail(function(){
                    localStorage.setItem("people:" + $(b).attr("eid") + ":DELETE", false);
                })
            });
        });

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            eid = row.person_id

            // buttons are hidden by default
            var actions = [
            '<button id="view' + eid + '" eid="' + eid + '" class="view btn btn-primary btn-sm" style="display: none;" title="view" type="button">',
                '<span class="mdi mdi-eye mdi-24px"></span>',
            '</button>',
            '<button id="edit' + eid + '" eid="' + eid + '" class="edit btn btn-primary btn-sm" style="display: none;" title="edit" type="button">',
                '<span class="mdi mdi-border-color mdi-24px"></span>',
            '</button>',
            '<button id="delete' + eid + '" eid="' + eid + '" class="delete btn btn-primary btn-sm" style="display: none;" title="delete" type="button">',
                '<span class="mdi mdi-delete mdi-24px"></span>',
            '</button>'];

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEditView(e, value, row, index) {
            // clearing selections
            $('select#entities').val(null).trigger('change');
            $('select#entities').find('option').remove();

            var persondata,
                managedentitydata,
                entitydata,
                permissiondata;
            var managedentitydataids;

            // getting the person
            personpromise = $.ajax({
                url: proxyPath + "people/" + row['person_id'],
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done personpromise");
                persondata = data;
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // getting the entities the person is manager of
            managerpromise = $.ajax({
                url: proxyPath + "people/" + row['person_id'] + "/manageentities",
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done managerpromise");
                managedentitydata = data;
                if (data != null) {
                    managedentitydataids = data.map(function(a) {return a.entity_id;});
                } else {
                    managedentitydataids = [];
                }
            });

            // getting the person permissions
            permissionpromise = $.ajax({
                url: proxyPath + "people/" + row['person_id'] + "/permissions",
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done permissionpromise");
                permissiondata = data;
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // getting the person entities
            entitypromise = $.ajax({
                url: proxyPath + "people/" + row['person_id'] + "/entities",
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                //console.log("done entitypromise");
                entitydata = data;
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            $.when(personpromise, managerpromise, entitypromise, permissionpromise).done(function() {
                // flattening person response data
                fdata = flatten(persondata);
                // autofilling form
                $("#viewedit-collapse").autofill( fdata, {"findbyname": false } );
                // setting index hidden input
                $("input#index").val(index);

                // appending managed entities in hidden inputs for further use
                $("input.manageentities").remove();
                for(var i in managedentitydata) {
                   var newOption = $("<input></input>");
                   newOption.addClass("manageentities");
                   newOption.attr("type", "hidden");
                   newOption.val(managedentitydata[i].entity_id);
                   $('form#person-update').append(newOption);
                }

                // populating the entities select2
                for(var i in entitydata) {
                   var newOption = new Option(entitydata[i].entity_name, entitydata[i].entity_id, true, true);
                   $('select#entities').append(newOption).trigger('change');
                }
                // adding a permission widget for each entity
                // except for managed entities
                $("#permissions").empty();
                console.log(entitydata);
                for(var i in entitydata) {
                    if ($.inArray(entitydata[i].entity_id, managedentitydataids) == -1){
                        $("#permissions").append(global.buildPermissionWidget(entitydata[i].entity_id, entitydata[i].entity_name, false));
                    } else {
                        $("#permissions").append(global.buildPermissionWidget(entitydata[i].entity_id, entitydata[i].entity_name, true));
                    }
                }

                // populating the permissions widget
                if ($("input.perm").length > 0) {
                    if (permissiondata == null) {
                        permissiondata = [];
                    }
                    global.populatePermissionWidget(permissiondata);
                }

                // disabling or enabling the widgets
                if ($(e.target).hasClass("view")) {
                    $("#viewedit-collapse").find("input").prop("disabled", true);
                    $("#viewedit-collapse").find("select").prop("disabled", true);
                    $("#viewedit-collapse").find("button#save").hide();
                } else {
                    $("#viewedit-collapse").find("input").prop("disabled", false);
                    $("#viewedit-collapse").find("select").prop("disabled", false);
                    $("#viewedit-collapse").find("button#save").show();
                }

                // finally collapsing the view
                $('#viewedit-collapse').collapse('show');
                $('#list-collapse').collapse('hide');
            });
        }

        // items actions callback
        window.operateEvents = {
            'click .view': function (e, value, row, index) {
                operateEditView(e, value, row, index)
            },
            'click .edit': function (e, value, row, index) {
                operateEditView(e, value, row, index)
            },
            'click .delete': function (e, value, row, index) {
                // hidding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: proxyPath + "people/" + row['person_id'],
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        global.displayMessage("person deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
| {{end}}
