extends static/templates/base.jade

block content

    .row
        .col-sm-12
            button.btn.btn-dark(type="button" onclick="location.href='/v/storages';") switch to storage view

    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-side-pagination='server', 
                                data-page-list="[10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-query-params='queryParams',
                                data-sort-name='name.name_label',
                                data-detail-view="true",
                                data-detail-formatter="detailFormatter")
                        thead
                            tr
                                th(data-field='product_id' data-sortable='true') ID
                                th(data-field='name.name_label' data-sortable='true') name
                                th(data-field='product_specificity' data-sortable='false') specificity
                                th(data-field='operate', data-formatter='operateFormatter', data-events='operateEvents') actions

        #edit-collapse.collapse(data-parent='#accordion')
            form#product-update
                input#index(type='hidden', name='index', value='')
                input#product_id(type='hidden', name='product_id', value='')

                .form-group.row
                    | {{$label := "name"}} {{$name := "name"}}
                    +select
                .form-group.row
                    | {{$label := "synonym(s)"}} {{$name := "synonyms"}}
                    +selectmultiple
                .form-group.row
                    | {{$label := "empirical formula"}} {{$name := "empiricalformula"}}
                    +select
                .form-group.row
                    | {{$label := "cas number"}} {{$name := "casnumber"}}
                    +select
                .form-group.row
                    | {{$label := "ce number"}} {{$name := "cenumber"}}
                    +select
                .form-group.row
                    | {{$label := "specificity"}} {{$name := "product_specificity"}}
                    +inputtext
                .form-group.row
                    | {{$label := "symbol(s)"}} {{$name := "symbols"}}
                    +selectmultiple
                    
            button#save.btn.btn-primary(type='button', onclick='saveProduct()') save changes
            button.btn.btn-secondary(type='button', onclick='closeEdit();') close

include static/templates/product/commonjs.jade

block contentjs
    script.
        //
        // close buttons actions
        //
        function closeEdit() { $("#list-collapse").collapse("show"); $("#edit-collapse").collapse("hide"); }
        
        var URLValues = new Map();

        // initializing query parameters map
        {{ range $key, $value := .URLValues }}
            URLValues.set({{ $key }}, {{ $value }});
        {{ end }}
        
        $( document ).ready(function() {           

            // populating search input if needed
            if (URLValues.has("search")) {
                $('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
            }

            //
            // update form validation
            //
            $( "#product-update" ).validate({
                // ignore required to validate select2
                ignore: "",
                errorClass: "alert alert-danger",
                rules: {
                    name: {
                        required: true,
                    },
                    empiricalformula: {
                        required: true,
                    },
                    casnumber: {
                        required: true,
                        remote: {
                            url: "",
                            type: "post",
                            beforeSend: function(jqXhr, settings) {
                                settings.url = "/validate/product/" + $("form#product-update input#product_id").val() + "/casnumber/";
                            },
                            data: {
                                casnumber: function() {
                                    return $('select#casnumber').select2('data')[0].text;
                                },
                                product_specificity:  function() {
                                    return $('#product_specificity').val();
                                },
                            },
                        },
                    },
                    cenumber: {
                        remote: {
                            url: "",
                            type: "post",
                            beforeSend: function(jqXhr, settings) {
                                settings.url = "/validate/product/" + $("form#product-update input#product_id").val() + "/cenumber/";
                            },
                            data: {
                                cenumber: function() {
                                    return $('select#cenumber').select2('data')[0].text;
                                },
                            },
                        },
                    },
                },
            });

            //
            // casnumber select2
            //
            $('select#casnumber').select2({
                tags: true,
                dropdownParent: $('#edit-collapse'),
                ajax: {
                    url: '/products/casnumbers',
                        data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: params.page*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.casnumber_label;
                            obj.id = obj.id || obj.casnumber_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-casnumber-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("change", function (e) {
                $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
            });

            //
            // cenumber select2
            //
            $('select#cenumber').select2({
                tags: true,
                allowClear: true,
                placeholder: "select or enter a CE number",
                dropdownParent: $('#edit-collapse'),
                ajax: {
                    url: '/products/cenumbers',
                        data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: params.page*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.cenumber_label.String;
                            obj.id = obj.id || obj.cenumber_id.Int64;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-cenumber-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("change", function (e) {
                $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
            });

            //
            // name select2
            //
            $('select#name').select2({
                tags: true,
                dropdownParent: $('#edit-collapse'),
                ajax: {
                    url: '/products/names',
                        data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: params.page*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.name_label;
                            obj.id = obj.id || obj.name_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-name-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("change", function (e) {
                $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
            });

            //
            // empirical formula select2
            //
            $('select#empiricalformula').select2({
                tags: true,
                dropdownParent: $('#edit-collapse'),
                ajax: {
                    url: '/products/empiricalformulas',
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: params.page*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.empiricalformula_label;
                            obj.id = obj.id || obj.empiricalformula_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-empiricalformula-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("change", function (e) {
                $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
            });

            //
            // synonyms select2
            //
            $('select#synonyms').select2({
                tags: true,
                dropdownParent: $('#edit-collapse'),
                ajax: {
                    url: '/products/synonyms',
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: params.page*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.name_label;
                            obj.id = obj.id || obj.name_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-synonyms-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            });

            //
            // symbols select2
            //
            $('select#symbols').select2({
                tags: true,
                dropdownParent: $('#edit-collapse'),
                templateResult: formatSymbol,
                ajax: {
                    url: '/products/symbols',
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.symbol_label;
                            obj.id = obj.id || obj.symbol_id;
                            return obj;
                        });
                         return {
                            results: newdata,
                        };
                    }
                }
            });

        });
        
        //
        // save store location callback
        //
        function saveProduct() {
            var form = $("#product-update");
            if (! form.valid()) {
                return;
            };

            var product_id = $("#edit-collapse input#product_id").val(),
                product_specificity = $("#edit-collapse input#product_specificity").val(),
                casnumber = $('select#casnumber').select2('data')[0];
                cenumber = $('select#cenumber').select2('data')[0];
                empiricalformula = $('select#empiricalformula').select2('data')[0];
                name_ = $('select#name').select2('data')[0];
                synonyms = $('select#synonyms').select2('data');
                symbols = $('select#symbols').select2('data');
                data = {};
                $.each(symbols, function( index, s ) {
                    data["symbols." + index +".symbol_id"] = s.id;
                    data["symbols." + index +".symbol_label"] = s.text;
                });
                $.each(synonyms, function( index, s ) {
                    data["synonyms." + index +".name_id"] = s.id == s.text ? -1 : s.id;
                    data["synonyms." + index +".name_label"] = s.text;
                });
                $.extend(data, {
                    "product_id": product_id,
                    "product_specificity": product_specificity,
                    "casnumber.casnumber_id": casnumber.id == casnumber.text ? -1 : casnumber.id,
                    "casnumber.casnumber_label": casnumber.text,
                    "empiricalformula.empiricalformula_id": empiricalformula.id == empiricalformula.text ? -1 : empiricalformula.id,
                    "empiricalformula.empiricalformula_label": empiricalformula.text,
                    "name.name_id": name_.id == name_.text ? -1 : name_.id,
                    "name.name_label": name_.text,
                });
                if (cenumber !== undefined) {
                    $.extend(data, {
                        "cenumber.cenumber_id": cenumber.id == cenumber.text ? -1 : cenumber.id,
                        "cenumber.cenumber_label": cenumber === undefined ? "" : cenumber.text,
                    });                    
                }
                $.ajax({
                    url: "/products/" + product_id,
                    method: "PUT",
                    dataType: 'json',
                    data: data,
                }).done(function(data, textStatus, jqXHR) {
                    $('#list-collapse').collapse('show');
                    $('#edit-collapse').collapse('hide');
                    var $table = $('#table');
                    var index = $('input#index').val();
                    $table.bootstrapTable('refresh');
                    displayMessage("product " + name_.text + " updated", "success");
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });  
        }

        //
        // table data loading
        //
        function queryParams(params) {
            if (URLValues.has("entity")) {
                params["entity"] = URLValues.get("entity")[0];
            }
            if (URLValues.has("product")) {
                params["product"] = URLValues.get("product")[0];
            }
            return params;
        }
        function getData(params) {
            $.ajax({
                url: "/products",
                method: "GET",
                dataType: "JSON",
                data: params.data,
            }).done(function(data, textStatus, jqXHR) {
                params.success({
                    rows: data.rows,
                    total: data.total,
                });
            }).fail(function(jqXHR, textStatus, errorThrown) {
                params.error(jqXHR.statusText);                
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
        }

        //
        // table detail formatter
        //
        function detailFormatter(index, row) {
            var html = [];
            html.push("<p><b>creator</b>: " + row["person"]["person_email"] + "</p>")
            html.push("<p><b>name</b>: " + row["name"]["name_label"] + "</p>")
            $.each(row["synonyms"], function (key, value) {
                html.push("<p>" + value["name_label"] + "</p>");
            });
            html.push("<p><b>empirical formula</b>: " + row["empiricalformula"]["empiricalformula_label"] + "</p>")
            html.push("<p><b>specificity</b>: " + row["product_specificity"] + "</p>")
            html.push("<p><b>cas</b>: " + row["casnumber"]["casnumber_label"] + "</p>")
            html.push("<p><b>ce</b>: " + row["cenumber"]["cenumber_label"]["String"] + "</p>")
            html.push("<p>")
            $.each(row["symbols"], function (key, value) {
                html.push("<img src='data:" + value["symbol_image"] + "' alt='" + value["symbol_label"] + "' title='" + value["symbol_label"] + "'/>");
            });
            html.push("</p>")
            return html.join('');
        }

        //
        // symbols select2 formatter
        //
        function formatSymbol (symbol) {
            if (!symbol.symbol_id) {
                return symbol.symbol_label;
            }
            var s = $(
                '<span><img src="data:' + symbol.symbol_image + '" title="' + symbol.symbol_label + '" /> ' + symbol.symbol_label + '</span>'
            );
            return s;
        };

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            pid = row.product_id
            // FIXME: perms
            hasPermission("/f/storages", "POST", pid).done(function(){
                    $("#store"+this.itemId).fadeIn();
            })
            hasPermission("/f/storages/-2", "GET", pid).done(function(){
                    $("#storages"+this.itemId).fadeIn();
            })
            hasPermission("/f/products/-1", "PUT", pid).done(function(){
                    $("#edit"+this.itemId).fadeIn();
            })
            hasPermission("/f/products/-1", "DELETE", pid).done(function(){
                    $("#delete"+this.itemId).fadeIn();
            })

            // buttons are hidden by default
            var actions = [
            '<button id="store' + pid + '" class="store btn btn-secondary" style="display: none;" title="store" type="button">',
                '<i class="fas fa-box-open"></i>',
            '</button>',
            '<button id="storages' + pid + '" class="storages btn btn-secondary" style="display: none;" title="storages" type="button">',
                '<i class="fas fa-boxes"></i>',
            '</button>',
            '<button id="edit' + pid + '" class="edit btn btn-secondary" style="display: none;" title="edit" type="button">',
                '<i class="fas fa-edit"></i>',
            '</button>',
            '<button id="delete' + pid + '" class="delete btn btn-secondary" style="display: none;" title="delete" type="button">',
                '<i class="fas fa-trash-alt"></i>',
            '</button>'];

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEdit(e, value, row, index) {
            // clearing selections
            $('select#casnumber').val(null).trigger('change');
            $('select#casnumber').find('option').remove();
            $('select#cenumber').val(null).trigger('change');
            $('select#cenumber').find('option').remove();
            $('select#name').val(null).trigger('change');
            $('select#name').find('option').remove();
            $('select#symbols').val(null).trigger('change');
            $('select#symbols').find('option').remove();
            $('select#synonyms').val(null).trigger('change');
            $('select#synonyms').find('option').remove();
            $('select#empiricalformula').val(null).trigger('change');
            $('select#empiricalformula').find('option').remove();

            // getting the product
            $.ajax({
                url: "/products/" + row['product_id'],
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);
                // autofilling form
                $("#edit-collapse").autofill( fdata, {"findbyname": false } );
                // setting index hidden input
                $("input#index").val(index);
                // select2 is not autofilled - we need a special operation
                var newOption = new Option(data.casnumber.casnumber_label, data.casnumber.casnumber_id, true, true);
                $('select#casnumber').append(newOption).trigger('change');
                if (data.cenumber.cenumber_id.Valid) {
                    var newOption = new Option(data.cenumber.cenumber_label.String, data.cenumber.cenumber_id.Int64, true, true);
                    $('select#cenumber').append(newOption).trigger('change');
                }
                var newOption = new Option(data.empiricalformula.empiricalformula_label, data.empiricalformula.empiricalformula_id, true, true);
                $('select#empiricalformula').append(newOption).trigger('change');
                var newOption = new Option(data.name.name_label, data.name.name_id, true, true);
                $('select#name').append(newOption).trigger('change');
                for(var i in data.symbols) {
                   var newOption = new Option(data.symbols[i].symbol_label, data.symbols[i].symbol_id, true, true);
                   $('select#symbols').append(newOption).trigger('change');
                }
                for(var i in data.synonyms) {
                   var newOption = new Option(data.synonyms[i].name_label, data.synonyms[i].name_id, true, true);
                   $('select#synonyms').append(newOption).trigger('change');
                }
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // finally collapsing the view
            $('#edit-collapse').collapse('show');
            $('#list-collapse').collapse('hide');
        }
        window.operateEvents = {
            'click .store': function (e, value, row, index) {
                window.location.href = "/vc/storages?product=" + row['product_id'];
            },
            'click .storages': function (e, value, row, index) {
                window.location.href = "/v/storages?product=" + row['product_id'];
            },
            'click .edit': function (e, value, row, index) {
                operateEdit(e, value, row, index)
            },
            'click .delete': function (e, value, row, index) {
                // hiding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: "/products/" + row['product_id'],
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        displayMessage("product deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
