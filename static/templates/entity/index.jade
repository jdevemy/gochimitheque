extends static/templates/base.jade

block content
    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-side-pagination='server', 
                                data-page-list="[10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-sort-name='entity_name')
                        thead
                            tr
                                th(data-field='entity_id') ID
                                th(data-field='entity_name' data-sortable='true') name
                                th(data-field='entity_description' data-sortable='true') description
                                th(data-field='operate', data-formatter='operateFormatter', data-events='operateEvents') actions

        #viewedit-collapse.collapse(data-parent='#accordion')
            form#entity-update
                input#index(type='hidden', name='index', value='')
                input#entity_id(type='hidden', name='entity_id', value='')
                .form-group.row
                    label.col-sm-2.col-form-label(for='name') name
                    .col-sm-10
                        input#entity_name.form-control(type='text', value='', name='name')
                .form-group.row
                    label.col-sm-2.col-form-label(for='description') description
                    .col-sm-10
                        input#entity_description.form-control(type='text', value='', name='description')
                .form-group.row
                    label.col-sm-2.col-form-label(for='person') manager
                    .col-sm-10
                        select.form-control(style='width: 100% !important;', id='person_email', name='person', multiple='multiple')
            button#save.btn.btn-primary(type='button', onclick='saveEntity()') save changes
            button.btn.btn-secondary(type='button', onclick='closeViewEdit();') close

block contentjs
    script.
        //
        // close buttons actions
        //
        function closeViewEdit() { $("#list-collapse").collapse("show"); $("#viewedit-collapse").collapse("hide"); }
        
        
        $( document ).ready(function() {
            
            // initializing query parameters map
            var URLValues = new Map();
            {{ range $key, $value := .URLValues }}
                URLValues.set({{ $key }}, {{ $value }});
            {{ end }}

            // populating search input if needed
            if (URLValues.has("search")) {
                $('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
            }

            //
            // update form validation
            //
            $( "#entity-update" ).validate({
                errorClass: "alert alert-danger",
                rules: {
                    name: {
                        required: true,
                        remote: {
                            url: "",
                            beforeSend: function(jqXhr, settings) {
                                settings.url = "/validate/entity/" + $("form#entity-update input#entity_id").val() + "/name/" + $("form#entity-update input#entity_name").val();
                            },
                        },
                    },
                },
            });

            //
            // manager select2
            //
            $('select[id="person_email"]').select2({
                dropdownParent: $('#viewedit-collapse'),
                ajax: {
                    url: '/people',
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing email by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.person_email;
                            obj.id = obj.id || obj.person_id;
                            return obj;
                        });
                        return {
                            results: newdata
                        };
                    }
                }
            });
        });
        
        //
        // save entity callback
        //
        function saveEntity() {
            var form = $("#entity-update");
            if (! form.valid()) {
                return;
            };

            var id = $("#viewedit-collapse input#entity_id").val(),
                name = $("#viewedit-collapse input#entity_name").val(),
                description = $("#viewedit-collapse input#entity_description").val(),
                selectedmanagers = $('select[id="person_email"]').select2('data');
                data = {};
                $.each(selectedmanagers, function( index, m ) {
                    data["managers." + index +".person_id"] = m.id;
                    data["managers." + index +".person_email"] = m.text;
                });
                $.extend(data, {
                    "entity_id": id,
                    "entity_name": name,
                    "entity_description": description,
                });
                $.ajax({
                    url: "/entities/" + id,
                    method: "PUT",
                    dataType: 'json',
                    data: data,
                }).done(function(data, textStatus, jqXHR) {
                    $('#list-collapse').collapse('show');
                    $('#viewedit-collapse').collapse('hide');
                    var $table = $('#table');
                    var index = $('input#index').val();
                    $table.bootstrapTable('updateRow', {
                        index: index,
                        row: {
                            "entity_name": name,
                            "entity_description": description,
                            "entity_person_id.person_email": person_email,
                        }
                    });
                    displayMessage("entity " + name + " updated", "success");
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });  
        }

        //
        // table data loading
        //
        function getData(params) {
            $.ajax({
                url: "/entities",
                method: "GET",
                dataType: "JSON",
                data: params.data,
            }).done(function(data, textStatus, jqXHR) {
                params.success({
                    rows: data.rows,
                    total: data.total,
                });
            }).fail(function(jqXHR, textStatus, errorThrown) {
                params.error(jqXHR.statusText);                
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
        }

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            eid = row.entity_id
            hasPermission2("/f/entities/" + eid, "GET", eid).done(function(){
                     $("#view"+this.itemId).fadeIn();
            })
            hasPermission2("/f/entities/" + eid, "PUT", eid).done(function(){
                    $("#edit"+this.itemId).fadeIn();
            })
            hasPermission2("/f/entities/" + eid, "DELETE", eid).done(function(){
                    $("#delete"+this.itemId).fadeIn();
            })

            // buttons are hidden by default
            var actions = [
            '<button id="view' + eid + '" class="view btn btn-secondary" style="display: none;" title="view" type="button">',
                '<i class="fas fa-eye"></i>',
            '</button>',
            '<button id="edit' + eid + '" class="edit btn btn-secondary" style="display: none;" title="edit" type="button">',
                '<i class="fas fa-edit"></i>',
            '</button>',
            '<button id="delete' + eid + '" class="delete btn btn-secondary" style="display: none;" title="delete" type="button">',
                '<i class="fas fa-trash-alt"></i>',
            '</button>'];

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEditView(e, value, row, index) {
            // clearing selections
            $('select[id="person_email"]').val(null).trigger('change');
            $('select[id="person_email"]').find('option').remove();

            // getting the entity
            $.ajax({
                url: "/entities/" + row['entity_id'],
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);
                // autofilling form
                $("#viewedit-collapse").autofill( fdata, {"findbyname": false } );
                // setting index hidden input
                $("input#index").val(index);
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // getting the entity managers
            $.ajax({
                url: "/entities/" + row['entity_id'] + "/people",
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // select2 is not autofilled - we need a special operation
                for(var i in data) {
                   var newOption = new Option(data[i].person_email, data[i].person_id, true, true);
                   $('select[id="person_email"]').append(newOption).trigger('change');
                }
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // finally collapsing the view
            $('#viewedit-collapse').collapse('show');
            $('#list-collapse').collapse('hide');

            if ($(e.target).hasClass("view")) {
                $("#viewedit-collapse").find("input").prop("disabled", true);
                $("#viewedit-collapse").find("select").prop("disabled", true);
                $("#viewedit-collapse").find("button#save").hide();
            } else {
                $("#viewedit-collapse").find("input").prop("disabled", false);
                $("#viewedit-collapse").find("select").prop("disabled", false);
                $("#viewedit-collapse").find("button#save").show();
            }
        }
        window.operateEvents = {
            'click .view': function (e, value, row, index) {
                operateEditView(e, value, row, index)
            },
            'click .edit': function (e, value, row, index) {
                operateEditView(e, value, row, index)
            },
            'click .delete': function (e, value, row, index) {
                // hiding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: "/entities/" + row['entity_id'],
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        displayMessage("entity deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
