extends ../base.jade
block CONTENT
    :go:func
        Storagecreate(c ViewContainer)

    +titleicon("creation", "forklift", "create storage")

    .row
        .d-flex.justify-content-center
            #filter-product

    form#storage
        input#index(type='hidden', name='index', value='')
        input#product_id(type='hidden', name='product_id', value='')

        input#exactMatchSupplier(type="hidden")

        .form-group.row
            .col-sm-4
                +inputnumber("nb duplicates", "storage_nbitem", "1", "1", "50", "")
        hr
        .form-group.row
            .form-group.col-sm-12
                +selectrequired("store location", "storelocation")
        .form-group.row
            .col-sm-6
                +inputnumber("quantity", "storage_quantity", "any", "1", "10000000", "")
            .col-sm-6
                +select("unit", "unit") 
        .form-group.row
            .col-sm-12
                +select("supplier", "supplier")
        .form-group.row
            .col-sm-3
                +inputdate("entry date", "storage_entrydate")
            .col-sm-3
                +inputdate("exit date", "storage_exitdate")
            .col-sm-3
                +inputdate("opening date", "storage_openingdate")
            .col-sm-3
                +inputdate("expiration date", "storage_expirationdate")
        .form-group.row
            .col-sm-6
                +inputtext("reference", "storage_reference")
            .col-sm-6
                +inputtext("batch number", "storage_batchnumber")
        .form-group.row
            .col-sm-12
                +inputtext("barecode", "storage_barecode")
        .form-group.row
            .col-sm-12
                +inputtext("comment", "storage_comment")  
        .form-group.row
            .col-sm-12
                +checkbox("to destroy", "storage_todestroy")

    button#save.btn.btn-link(type='button', onclick='saveStorage()')
        span.mdi.mdi-content-save.mdi-24px.iconlabel
            = T("save", 1)

block CONTENTJS
    script.

       $( document ).ready(function() {           

            //
            // retrieving product
            //
            var urlParams = new URLSearchParams(window.location.search);
            p = urlParams.get("product");
            if (p === null) {
                window.location.replace("/v/products");
            }
            // getting the product
            $.ajax({
                url: proxyPath + "products/" + p,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                $("input#product_id").val(p);
                $("#filter-product").html(global.createTitle(data.name.name_label + " (" + data.casnumber.casnumber_label + ") " + data.product_specificity.String, "product"));
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // clone mode
            s = urlParams.get("storage");
            if (s !== null) {
            // getting the storage
            $.ajax({
                url: proxyPath + "storages/" + s,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);

                // processing sqlNull values
                //newfdata = normalizeSqlNull(fdata)
                newfdata = global.normalizeSqlNull(fdata);

                // autofilling form
                $("form#storage").autofill( newfdata, {"findbyname": false } );

                // select2 is not autofilled - we need a special operation
                var newOption = new Option(data.storelocation.storelocation_name.String, data.storelocation.storelocation_id.Int64, true, true);
                $('select#storelocation').append(newOption).trigger('change');

                if (data.unit.unit_id.Valid) {
                    var newOption = new Option(data.unit.unit_label.String, data.unit.unit_id.Int64, true, true);
                    $('select#unit').append(newOption).trigger('change');
                }

                if (data.supplier.supplier_id.Valid) {
                    var newOption = new Option(data.supplier.supplier_label.String, data.supplier.supplier_id.Int64, true, true);
                    $('select#supplier').append(newOption).trigger('change');
                }         
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
            }

        });

    script(src="../js/chim/storage.js")