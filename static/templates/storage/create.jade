| {{define "CONTENT"}}
    .row
        .col-sm-4.offset-sm-4
            #filter-product

    form#storage
        input#index(type='hidden', name='index', value='')
        input#product_id(type='hidden', name='product_id', value='')

        input#exactMatchSupplier(type="hidden")

        .form-group.row
            .col-sm-4
                | {{$label := "nb duplicates"}} {{$name := "storage_nbitem"}} {{$step := "1"}} {{$min := "1"}} {{$max := "50"}} {{$value := ""}}
                +inputnumber
        hr
        .form-group.row
            .form-group.col-sm-auto
                span.badge.badge-pill.badge-danger &nbsp;
            .form-group.col-sm-11
                | {{$label := "store location"}} {{$name := "storelocation"}}
                +select
        .form-group.row
            .col-sm-6
                | {{$label := "quantity"}} {{$name := "storage_quantity"}} {{$step := "any"}} {{$min := "1"}} {{$max := "10000000"}} {{$value := ""}}
                +inputnumber
            .col-sm-6
                | {{$label := "unit"}} {{$name := "unit"}}
                +select 
        .form-group.row
            .col-sm-12
                | {{$label := "supplier"}} {{$name := "supplier"}}
                +select
        .form-group.row
            .col-sm-3
                | {{$label := "entry date"}} {{$name := "storage_entrydate"}}
                +inputdate
            .col-sm-3
                | {{$label := "exit date"}} {{$name := "storage_exitdate"}}
                +inputdate
            .col-sm-3
                | {{$label := "opening date"}} {{$name := "storage_openingdate"}}
                +inputdate
            .col-sm-3
                | {{$label := "expiration date"}} {{$name := "storage_expirationdate"}}
                +inputdate
        .form-group.row
            .col-sm-6
                | {{$label := "reference"}} {{$name := "storage_reference"}}
                +inputtext
            .col-sm-6
                | {{$label := "batch number"}} {{$name := "storage_batchnumber"}}
                +inputtext
        .form-group.row
            .col-sm-12
                | {{$label := "barecode"}} {{$name := "storage_barecode"}}
                +inputtext
        .form-group.row
            .col-sm-12
                | {{$label := "comment"}} {{$name := "storage_comment"}}
                +inputtext  
        .form-group.row
            .col-sm-12
                | {{$label := "to destroy"}} {{$name := "storage_todestroy"}}
                +checkbox

    button#save.btn.btn-primary(type='button', onclick='saveStorage()') save changes
| {{end}}
| {{define "CONTENTJS"}}
| {{template "COMMONCONTENTJS"}}
    script.

       $( document ).ready(function() {           

            //
            // retrieving product
            //
            var urlParams = new URLSearchParams(window.location.search);
            p = urlParams.get("product");
            if (p === null) {
                window.location.replace("/v/products");
            }
            // getting the product
            $.ajax({
                url: proxyPath + "products/" + p,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                $("input#product_id").val(p);
                $("#filter-product").html(createTitle(data.name.name_label + " (" + data.casnumber.casnumber_label + ") " + data.product_specificity.String, "product"));
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // clone mode
            s = urlParams.get("storage");
            if (s !== null) {
            // getting the storage
            $.ajax({
                url: proxyPath + "storages/" + s,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);

                // processing sqlNull values
                newfdata = normalizeSqlNull(fdata)
            
                // autofilling form
                $("form#storage").autofill( newfdata, {"findbyname": false } );

                // select2 is not autofilled - we need a special operation
                var newOption = new Option(data.storelocation.storelocation_name.String, data.storelocation.storelocation_id.Int64, true, true);
                $('select#storelocation').append(newOption).trigger('change');

                if (data.unit.unit_id.Valid) {
                    var newOption = new Option(data.unit.unit_label.String, data.unit.unit_id.Int64, true, true);
                    $('select#unit').append(newOption).trigger('change');
                }

                if (data.supplier.supplier_id.Valid) {
                    var newOption = new Option(data.supplier.supplier_label.String, data.supplier.supplier_id.Int64, true, true);
                    $('select#supplier').append(newOption).trigger('change');
                }         
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
            }

        });

| {{end}}