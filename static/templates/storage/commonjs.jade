block COMMONCONTENTJS

script.

    $( document ).ready(function() {  
    
            //
            // form validation
            //
            $( "#storage" ).validate({
                errorClass: "alert alert-danger",
                rules: {
                    storelocation: {
                        required: true,
                    },
                },
            });
            $( "#borrowing" ).validate({
                errorClass: "alert alert-danger",
                rules: {
                    borrower: {
                        required: true,
                    },
                },
            });

            //
            // search form
            //
            $('select#s_storelocation').select2({
                templateResult: formatStorelocation,
                placeholder: "store location",
                ajax: {
                    url: proxyPath + 'storelocations',
                    delay: 400,
                        data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.storelocation_fullpath;
                            obj.id = obj.id || obj.storelocation_id.Int64;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-s_storelocation-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            });

            $('select#s_casnumber').select2({
                tags: false,
                allowClear: true,
                placeholder: "select a cas number",
                ajax: {
                    url: proxyPath + 'products/casnumbers/',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.casnumber_label;
                            obj.id = obj.id || obj.casnumber_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-s_casnumber-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            });

            $('select#s_name').select2({
                tags: false,
                allowClear: true,
                placeholder: "select a name",
                ajax: {
                    url: proxyPath + 'products/names/',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {

                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.name_label;
                            obj.id = obj.id || obj.name_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-s_name-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            });

            $('select#s_empiricalformula').select2({
                tags: false,
                allowClear: true,
                placeholder: "select a formula",
                ajax: {
                    url: proxyPath + 'products/empiricalformulas/',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {

                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.empiricalformula_label;
                            obj.id = obj.id || obj.empiricalformula_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-s_empiricalformula-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            });

            $('select#s_signalword').select2({
                templateResult: formatSignalWord,
                allowClear: true,
                placeholder: "select signal word",
                ajax: {
                    url: proxyPath + 'products/signalwords/',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.signalword_label.String;
                            obj.id = obj.id || obj.signalword_id.Int64;
                            return obj;
                        });
                            return {
                            results: newdata,
                        };
                    }
                }
            });

            $('select#s_symbols').select2({
                templateResult: formatSymbol,
                closeOnSelect: false,
                ajax: {
                    url: proxyPath + 'products/symbols/',
                    delay: 400,
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.symbol_label;
                            obj.id = obj.id || obj.symbol_id;
                            return obj;
                        });
                            return {
                            results: newdata,
                        };
                    }
                }
            });

            $('select#s_hazardstatements').select2({
                templateResult: formatHazardStatement,
                closeOnSelect: false,
                ajax: {
                    url: proxyPath + 'products/hazardstatements/',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.hazardstatement_reference;
                            obj.id = obj.id || obj.hazardstatement_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-hazardstatements-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            });

            $('select#s_precautionarystatements').select2({
                templateResult: formatPrecautionaryStatement,
                closeOnSelect: false,
                ajax: {
                    url: proxyPath + 'products/precautionarystatements/',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.precautionarystatement_reference;
                            obj.id = obj.id || obj.precautionarystatement_id;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-precautionarystatements-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            });

            //
            // store locations selector select2
            //
            $('select#storelocationselector').select2({
                templateResult: formatStorelocation,
                placeholder: "direct store location access",
                ajax: {
                    url: proxyPath + 'storelocations',
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.storelocation_fullpath;
                            obj.id = obj.id || obj.storelocation_id.Int64;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-storelocationselector-results li").length + 10;
                        
                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("select2:select", function (e) {
                var data = e.params.data;
                var slid = data.storelocation_id.Int64;
                window.location.href = proxyPath + "v/products?storelocation=" + slid;
            });

            //
            // store location select2
            //
            $('select#storelocation').select2({
                templateResult: formatStorelocation,
                ajax: {
                    url: proxyPath + 'storelocations',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            storelocation_canstore: true,
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.storelocation_name.String;
                            obj.id = obj.id || obj.storelocation_id.Int64;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-storelocation-results li").length + 10;
                        
                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("change", function (e) {
                $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
            });

            //
            // unit select2
            //
            $('select#unit').select2({
                allowClear: true,
                placeholder: "select a unit",
                ajax: {
                    url: proxyPath + 'storages/units',
                    delay: 400,
                    data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.unit_label.String;
                            obj.id = obj.id || obj.unit_id.Int64;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-unit-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("change", function (e) {
                $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
            });

            //
            // suppliers select2
            //
            $('select#supplier').select2({
                allowClear: true,
                tags: true,
                placeholder: "select or enter a supplier",
                createTag: function (params) {
                    if ($("input#exactMatchSupplier").val() == "true") {
                        return null
                    }
                    return {
                        id: params.term,
                        text: params.term,
                    }
                },
                ajax: {
                    url: proxyPath + 'storages/suppliers',
                    delay: 400,
                        data: function (params) {
                        var query = {
                            search: params.term,
                            page: params.page || 1,
                            offset: (params.page-1)*10 || 0,
                            limit: 10
                        }

                        // Query parameters will be ?search=[term]&page=[page]
                        return query;
                    },
                    dataType: 'json',
                    processResults: function (data) {
                        isExactMatch=false;
                        
                        // looking for an exact match
                        $.each(data.rows, function( index, value ) {
                            if(value.c == 1) {
                                isExactMatch=true;
                            }
                        });
                        
                        // there is a match: setting the input field
                        if (isExactMatch) {
                            $("input#exactMatchSupplier").val("true");
                        } else {
                            $("input#exactMatchSupplier").val("false");
                        }

                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.supplier_label.String;
                            obj.id = obj.id || obj.supplier_id.Int64;
                            return obj;
                        });
                        // getting the number of loaded select elements
                        selectnbitems = $("ul#select2-supplier-results li").length + 10;

                        return {
                            results: newdata,
                            pagination: {more: selectnbitems<data.total}
                        };
                    }
                }
            }).on("change", function (e) {
                $(this).valid(); // FIXME: see https://github.com/select2/select2/issues/3901
            });

            //
            // borrowers select2
            //
            $('select#borrower').select2({
            ajax: {
                url: proxyPath + 'people',
                dataType: 'json',
                processResults: function (data) {
                // replacing email by text expected by select2
                var newdata = $.map(data.rows, function (obj) {
                    obj.text = obj.text || obj.person_email;
                    obj.id = obj.id || obj.person_id;
                    return obj;
                });
                return {
                    results: newdata
                };
                }
            }
            });

    });

    //
    // store location select2 formatter
    //
    function formatStorelocation (sl) {
        if (!sl.storelocation_id) {
            return sl.storelocation_fullpath;
        }
        var canstore = '<span class="mdi mdi-close"></span>';
        var icon = '<span class="mdi mdi-gesture" style="color: ' + sl.storelocation_color.String + ';"></span>';
        if (sl.storelocation_canstore.Valid && sl.storelocation_canstore.Bool) {
            canstore = '<span class="mdi mdi-check"></span>'
        }
        var s = $(
            '<div>' + icon + '<span>' + sl.storelocation_fullpath + '</span>' + canstore + '</div>'
        );
        return s;
    };
    //
    // signalwords select2 formatter
    //
    function formatSignalWord (signalword) {
        if (!signalword.signalword_id) {
            return signalword.signalword_label;
        }
        if (signalword.signalword_id.Valid) {
            return signalword.signalword_label.String;
        }
    };
    //
    // symbols select2 formatter
    //
    function formatSymbol (symbol) {
        if (!symbol.symbol_id) {
            return symbol.symbol_label;
        }
        var s = $(
            '<span><img src="data:' + symbol.symbol_image + '" title="' + symbol.symbol_label + '" /> ' + symbol.symbol_label + '</span>'
        );
        return s;
    };
    //
    // precautionary statements select2 formatter
    //
    function formatPrecautionaryStatement (ps) {
        if (!ps.precautionarystatement_id) {
            return ps.precautionarystatement_label;
        }
        var s = $(
            '<span><b>' + ps.precautionarystatement_reference + '</b> ' + ps.precautionarystatement_label + '</span>'
        );
        return s;
    };
    //
    // hazard statements select2 formatter
    //
    function formatHazardStatement (hs) {
        if (!hs.hazardstatement_id) {
            return hs.hazardstatement_label;
        }
        var s = $(
            '<span><b>' + hs.hazardstatement_reference + '</b> ' + hs.hazardstatement_label + '</span>'
        );
        return s;
    };
    
    //
    // save storage callback
    //
    var createCallBack = function createCallback(data, textStatus, jqXHR) {
        global.displayMessage("storage created", "success");
        setTimeout(function(){ window.location = proxyPath + "v/storages?product="+data.product.product_id+"&hl="+data.product.product_id; }, 1000);
    }
    var updateCallBack = function updateCallback(data, textStatus, jqXHR) {
        //- $('#list-collapse').collapse('show');
        //- $('#edit-collapse').collapse('hide');
        //- var $table = $('#table');
        //- var index = $('input#index').val();
        //- // appending hl parameter to highlight updated row
        //- updateQueryStringParam("hl", data.storage_id.Int64);
        //- $table.bootstrapTable('refresh');
        console.log(data)
        global.displayMessage("storage " + data.storage_id.Int64 + " updated", "success");
        setTimeout(function(){ window.location = proxyPath + "v/storages?product="+data.product.product_id+"&hl="+data.product.product_id; }, 1000);
    }

    function saveStorage() {
        var form = $("#storage");
        if (! form.valid()) {
            return;
        };

        var product_id = $("input#product_id").val(),
            storage_id = $("input#storage_id").val(),
            storage_nbitem = $("input#storage_nbitem").val(),
            storage_comment = $("input#storage_comment").val(),
            storage_quantity = $("input#storage_quantity").val(),
            storage_barecode = $("input#storage_barecode").val(),
            storage_entrydate = $("input#storage_entrydate").val(),
            storage_exitdate = $("input#storage_exitdate").val(),
            storage_openingdate = $("input#storage_openingdate").val(),
            storage_expirationdate = $("input#storage_expirationdate").val(),
            storage_reference = $("input#storage_reference").val(),
            storage_batchnumber = $("input#storage_batchnumber").val(),
            storage_todestroy = $("input#storage_todestroy:CHECKED").val(),
            unit = $('select#unit').select2('data')[0],
            supplier = $('select#supplier').select2('data')[0],
            storelocation = $('select#storelocation').select2('data')[0],
            ajax_url = proxyPath + "storages",
            ajax_method = "POST",
            ajax_callback = createCallBack,
            data = {};

            if ($("form#storage input#storage_id").length) {
                ajax_url = proxyPath + "storages/" + storage_id
                ajax_method = "PUT"
                ajax_callback = updateCallBack
            }

            $.extend(data, {
                "product.product_id": product_id,
                "storage_id": storage_id,
                "storage_nbitem": storage_nbitem == 0 ? 1 : storage_nbitem,
                "storage_comment": storage_comment,
                "storage_quantity": storage_quantity == "" ? 1 : storage_quantity,
                "storage_barecode": storage_barecode,
                "storage_reference": storage_reference,
                "storage_batchnumber": storage_batchnumber,
                "storage_todestroy": storage_todestroy == "on" ? true : false,
                "storelocation.storelocation_id": storelocation.id,
            });
            if (supplier !== undefined) {
                $.extend(data, {
                    "supplier.supplier_id": supplier.id == supplier.text ? -1 : supplier.id,
                    "supplier.supplier_label": supplier === undefined ? "" : supplier.text,
                });                    
            }
            if (unit !== undefined) {
                $.extend(data, {
                    "unit.unit_id": unit.id,
                    "unit.unit_label": unit.text,
                });                    
            }
            if (storage_entrydate !== "") {
                $.extend(data, {
                    "storage_entrydate": storage_entrydate,
                });
            }
            if (storage_exitdate !== "") {
                $.extend(data, {
                    "storage_exitdate": storage_exitdate,
                });
            }
            if (storage_openingdate !== "") {
                $.extend(data, {
                    "storage_openingdate": storage_openingdate,
                });
            }
            if (storage_expirationdate !== "") {
                $.extend(data, {
                    "storage_expirationdate": storage_expirationdate,
                });
            }
            $.ajax({
                url: ajax_url,
                method: ajax_method,
                dataType: 'json',
                data: data,
            }).done(ajax_callback).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });  
    }
