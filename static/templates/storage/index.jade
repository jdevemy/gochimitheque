| {{define "CONTENT"}}

    .row
        .col-sm-8
            #filter-item
        .col-sm-2.d-flex.justify-content-end
            #button-store
        .col-sm-2.d-flex.justify-content-end
            #button-stock

    #toolbar.row
        .col
            button.btn.btn-dark#switchview(type="button" title="switch to product view" onclick="switchProductStorageView()")
                i.material-icons local_offer
        .col#storelocation-selector
            | {{$label := ""}} {{$name := "storelocationselector"}}
            +select

    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-toolbar="#toolbar",
                                data-side-pagination='server', 
                                data-page-list="[5, 10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-query-params='queryParams',
                                data-sort-name='name.name_label',
                                data-detail-view="true",
                                data-detail-formatter="detailFormatter",
                                data-row-attributes="rowAttributes")
                        thead
                            tr
                                th(data-field='storage_id' data-formatter='storage_idFormatter' data-sortable='true') ID
                                th(data-field='storage_modificationdate' data-formatter='dateFormatter' data-sortable='true') modification date
                                th(data-field='storage_barecode' data-formatter='storage_barecodeFormatter') barecode
                                th(data-field='product.name.name_label' data-sortable='true') product
                                th(data-field='storelocation.storelocation_fullpath' data-sortable='true' data-formatter='storelocation_fullpathFormatter') store location
                                th(data-field='operate', data-formatter='operateFormatter', data-events='operateEvents') actions

        #edit-collapse.collapse(data-parent='#accordion')
            form#storage
                input#index(type='hidden', name='index', value='')
                input#storage_id(type='hidden', name='storage_id', value='')

                input#exactMatchSupplier(type="hidden")

                .form-group.row
                    .form-group.col-sm-auto
                        span.badge.badge-pill.badge-danger &nbsp;
                    .form-group.col-sm-11
                        | {{$label := "store location"}} {{$name := "storelocation"}}
                        +select
                .form-group.row
                    .col-sm-6
                        | {{$label := "quantity"}} {{$name := "storage_quantity"}} {{$step := "any"}} {{$min := "1"}} {{$max := "10000000"}} {{$value := ""}}
                        +inputnumber
                    .col-sm-6
                        | {{$label := "unit"}} {{$name := "unit"}}
                        +select 
                .form-group.row
                    .col-sm-12
                        | {{$label := "supplier"}} {{$name := "supplier"}}
                        +select
                .form-group.row
                    .col-sm-3
                        | {{$label := "entry date"}} {{$name := "storage_entrydate"}}
                        +inputdate
                    .col-sm-3
                        | {{$label := "exit date"}} {{$name := "storage_exitdate"}}
                        +inputdate
                    .col-sm-3
                        | {{$label := "opening date"}} {{$name := "storage_openingdate"}}
                        +inputdate
                    .col-sm-3
                        | {{$label := "expiration date"}} {{$name := "storage_expirationdate"}}
                        +inputdate
                .form-group.row
                    .col-sm-6
                        | {{$label := "reference"}} {{$name := "storage_reference"}}
                        +inputtext
                    .col-sm-6
                        | {{$label := "batch number"}} {{$name := "storage_batchnumber"}}
                        +inputtext
                .form-group.row
                    .col-sm-12
                        | {{$label := "barecode"}} {{$name := "storage_barecode"}}
                        +inputtext
                .form-group.row
                    .col-sm-12
                        | {{$label := "comment"}} {{$name := "storage_comment"}}
                        +inputtext  
                .form-group.row
                    .col-sm-12
                        | {{$label := "to destroy"}} {{$name := "storage_todestroy"}}
                        +checkbox

            button#save.btn.btn-primary(type='button', onclick='saveStorage()') save changes
            button.btn.btn-secondary(type='button', onclick='closeEdit();') close
| {{end}}
| {{define "CONTENTJS"}}
| {{template "COMMONCONTENTJS"}}
    script.
        //
        // close buttons actions
        //
        function closeEdit() { 

            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            $("#list-collapse").collapse("show"); 
            $("#edit-collapse").collapse("hide"); 
            if (!urlParams.get("product") && !urlParams.get("entity")) {
                $("#switchview").show();
                $("#storelocation-selector").show();
            }
        }

        //
        // startup actions
        //
        $( document ).ready(function() {    
        });
        $('#table').on('load-success.bs.table refresh.bs.table', function () {
            
            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            // FIXME: this should be done before table rendering to avoid 2 ajax calls
            // populating search input if needed
            //if (URLValues.has("search")) {
            if (urlParams.has("search")) {
                //$('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
                $('#table').bootstrapTable('resetSearch', urlParams.get("search"));
            }
            // highlight row if needed
            //if (URLValues.has("hl")) {
            if (urlParams.has("hl")) {
                //highlightRow("storage_id", URLValues.get("hl")[0]);
                highlightRow("storage_id", urlParams.get("hl"));
            }
            
            var storelocationpromise = $.Deferred();
            var entitypromise = $.Deferred();
            var storagepromise = $.Deferred();
            var productpromise = $.Deferred();
            var historypromise = $.Deferred();
            var productData, storageData, storelocationData, entityData, historyData;
            // display titles, switch products<>storages selector
            //if (URLValues.has("entity")) {
            if (urlParams.has("entity")) {
                //e = URLValues.get("entity")[0];
                e = urlParams.get("entity");
                entitypromise = $.ajax({
                    url: proxyPath + "entities/" + e,
                    method: "GET",
                }).done(function(data, textStatus, jqXHR) {
                    entityData = data;
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });
            } else {
                entitypromise.resolve();
            }
            if (urlParams.has("storelocation")) {
                //e = URLValues.get("entity")[0];
                s = urlParams.get("storelocation");
                storelocationpromise = $.ajax({
                    url: proxyPath + "storelocations/" + s,
                    method: "GET",
                }).done(function(data, textStatus, jqXHR) {
                    storelocationData = data;
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });
            } else {
                storelocationpromise.resolve();
            }
            if (urlParams.has("storage")) {
                //e = URLValues.get("entity")[0];
                s = urlParams.get("storage");
                storagepromise = $.ajax({
                    url: proxyPath + "storages/" + s,
                    method: "GET",
                }).done(function(data, textStatus, jqXHR) {
                    storageData = data;
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });
                // hiding the storage<>product view switch
                $("#switchview").hide();
                $("#storelocation-selector").hide();
            } else {
                storagepromise.resolve();
            }
            //if (URLValues.has("product")) {
            if (urlParams.has("product")) {
                //p = URLValues.get("product")[0];
                p = urlParams.get("product");
                // setting the title
                productpromise = $.ajax({
                    url: proxyPath + "products/" + p,
                    method: "GET",
                }).done(function(data, textStatus, jqXHR) {
                    productData = data;
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });
                // hiding the storage<>product view switch
                $("#switchview").hide();
                $("#storelocation-selector").hide();
                
                // adding a create storage button for the product
                hasPermission(proxyPath + "f/storages/-2", "POST").done(function(){
                    b = $("<button>").addClass("store btn btn-link").attr("title", "store this product").attr("type", "button");
                    b.attr("onclick", "window.location.href = '" + proxyPath + "vc/storages?product=" + p + "'");
                    i = $("<i>").addClass("material-icons").text("move_to_inbox");
                    b.append(i);
                    $("#button-store").html(b);
                })

                hasPermission(proxyPath + "f/storages/-2", "GET").done(function(){
                    // adding a create show stock button for the product
                    b = $("<button>").addClass("store btn btn-link").attr("title", "show stock of this product").attr("type", "button");
                    b.attr("onclick", "showStock(" + p + ")");
                    i = $("<i>").addClass("material-icons").text("functions");
                    b.append(i);
                    $("#button-stock").html(b);
                })

            } else {
                productpromise.resolve();
            }
            if (urlParams.has("history")) {
                historyData = true;
            }
            historypromise.resolve();

            $.when(entitypromise, storelocationpromise, storagepromise, productpromise).done(function() {
                $("#filter-item").html("");
                if (historyData !== undefined) {
                    $("#filter-item").append(createTitle("history", "history"));
                };
                if (entityData !== undefined) {
                    $("#filter-item").append(createTitle(entityData.entity_name, "entity"));
                };
                if (storelocationData !== undefined) {
                    $("#filter-item").append(createTitle(storelocationData.storelocation_name.String, "storelocation"));
                };
                if (storageData !== undefined) {
                    $("#filter-item").append(createTitle(storageData.product.name.name_label + " " + storageData.product.product_specificity.String + " (" + storageData.product.casnumber.casnumber_label + ") - " + storageData.storelocation.storelocation_fullpath, "storage"));
                };
                if (productData !== undefined) {
                    $("#filter-item").append(createTitle(productData.name.name_label + " (" + productData.casnumber.casnumber_label + ") " + productData.product_specificity.String, "product"));
                };
            });

            cleanQueryParams();
        });

        //
        // stock
        //
        function showStockRecursive(sl, depth) {
            // pre checking if there is a stock or not for sl
            var hasStock = false;
            for (var i in sl.stock) { 
                var stock = sl.stock[i];
                if (stock.total !== 0 || stock.current !== 0) {
                    hasStock = true;
                    break;
                }
            }

            if (hasStock) {
                var html = [("<div class='row mt-sm-3'>")];
                for (i=1; i<=depth; i++) {
                    html.push("<div class='col-sm-1'>&nbsp;</div>");
                }
                html.push("<div class='col' style='color: " + sl.storelocation_color.String + "'>" + sl.storelocation_name.String + "</div>");

                for (var i in sl.stock) {
                    var stock = sl.stock[i];
                    
                    if (stock.total === 0 && stock.current === 0) {
                    } else {
                        html.push("<div class='col'><i title='total stock including sub store locations' class='material-icons'>functions</i> " + stock.total + " <b>" + stock.unit.unit_label.String + "</b></div>");
                        html.push("<div class='col'><i title='total in this store location' class='material-icons'>extensions</i> " + stock.current + " <b>" + stock.unit.unit_label.String + "</b></div>");
                    
                    }
                }
                
                $("#stock").append(html.join(""));
                $("#stock").append("</div>");
            }

            if (sl.children !== null) {
                depth++;
                for  (var key in sl.children) {
                    showStockRecursive(sl.children[key], depth);
                }
            }
        }
        function showStock(pid) {
            $("#stock").html("");
            $.ajax({
                url: proxyPath + "stocks/" + pid,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                for (var key in data) {
                    showStockRecursive(data[key], 0)
                }
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status);
            });
        }

        //
        // table data loading
        //
        function queryParams(params) {
            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            if (urlParams.has("entity")) {
                params["entity"] = urlParams.get("entity");
            }
            if (urlParams.has("storelocation")) {
                params["storelocation"] = urlParams.get("storelocation");
            }
            if (urlParams.has("product")) {
                params["product"] = urlParams.get("product");
            }
            if (urlParams.has("storage")) {
                params["storage"] = urlParams.get("storage");
            }
            if (urlParams.has("history")) {
                params["history"] = urlParams.get("history");
            }
            return params;
        }
        function getData(params) {
            // saving the query parameters
            lastQueryParams = params;
            $.ajax({
                url: proxyPath + "storages",
                method: "GET",
                dataType: "JSON",
                data: params.data,
            }).done(function(data, textStatus, jqXHR) {
                params.success({
                    rows: data.rows,
                    total: data.total,
                });
            }).fail(function(jqXHR, textStatus, errorThrown) {
                params.error(jqXHR.statusText);                
                handleHTTPError(jqXHR.statusText, jqXHR.status);
            });
        }

        //
        // table row attributes
        //
        function rowAttributes(row, index) {
            return {"storage_id":row["storage_id"]}
        }
        //
        // table detail formatter
        //
        function detailFormatter(index, row) {
            var html = [];
            html.push("<div class='row mt-md-3'>")
            html.push("<div class='col-sm-6'><p><b>product</b>: " + row["product"]["name"]["name_label"] + "</p></div>")
            html.push("<div class='col-sm-6'><b>store location</b>: " + row["storelocation"]["storelocation_name"]["String"] + "</p></div>")
            html.push("</div>")            

            html.push("<div class='row mt-md-3'>")
            html.push("<div class='col-sm-3'><p><b>quantity</b>: " + row["storage_quantity"]["Float64"] + " " + row["unit"]["unit_label"]["String"] + "</p></div>")
            html.push("<div class='col-sm-3'><b>barecode</b>: " + row["storage_barecode"]["String"] + "</p></div>")
            html.push("<div class='col-sm-3'><b>batch number</b>: " + row["storage_batchnumber"]["String"] + "</p></div>")
            html.push("<div class='col-sm-3'><p><b>supplier</b>: " + row["supplier"]["supplier_label"]["String"] + "</p></div>")
            html.push("</div>")    

            html.push("<div class='row mt-md-3'>")
            html.push("<div class='col-sm-3'><b>entry date</b>: " + dateFormatter(row["storage_entrydate"], null, null, null) + "</p></div>")
            html.push("<div class='col-sm-3'><b>exit date</b>: " + dateFormatter(row["storage_exitdate"], null, null, null) + "</p></div>")
            html.push("<div class='col-sm-3'><b>opening date</b>: " + dateFormatter(row["storage_openingdate"], null, null, null) + "</p></div>")
            html.push("<div class='col-sm-3'><b>expiration date</b>: " + dateFormatter(row["storage_expirationdate"], null, null, null) + "</p></div>")
            html.push("</div>")   

            html.push("<div class='row mt-md-3'>")
            html.push("<div class='col-sm-4'><b>created at</b>: " + dateFormatter(row["storage_creationdate"], null, null, null) + "</p></div>")
            html.push("<div class='col-sm-4'><b>modified at</b>: " + dateFormatter(row["storage_modificationdate"], null, null, null) + "</p></div>")
            html.push("<div class='col-sm-4'><p><b>by</b>: " + row["person"]["person_email"] + "</p></div>")
            html.push("</div>")   

            html.push("<div class='row mt-md-3'>")
            html.push("<div class='col-sm-12'><b>to destroy</b>: " + row["storage_todestroy"]["Bool"] + "</p></div>")
            html.push("</div>")  
            return html.join('');
        }
        //
        // date formatter
        //
        function dateFormatter(value, row, index, field) {
            if (value.Valid != undefined && value.Valid == false) {
                return ""
            } else {
                date = new Date(value);
                return date.toLocaleString();
            }
        }
        //
        // storage_idFormatter
        //
        function storage_idFormatter(value, row, index, field) {
            if (row.storage_id.Valid) {
                return row.storage_id.Int64;
            } else {
                return value;
            }            
        }
        //
        // storelocation_name formatter
        //
        function storelocation_fullpathFormatter(value, row, index, field) {
            if (row.storelocation.storelocation_color.Valid) {
                return "<span style='color:" + row.storelocation.storelocation_color.String + ";'>" + value + "</span>";
            } else {
                return "<span>" + value + "</span>";
            }
        }
        //
        // storage_barecode formatter
        //
        function storage_barecodeFormatter(value, row, index, field) {
            if (row.storage_barecode.Valid) {
                return row.storage_barecode.String;
            } else {
                return "";
            }
        }

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            sid = row.storage_id.Int64
            eid = row.storelocation.entity.entity_id
            hasPermission(proxyPath + "f/storages/" + eid, "PUT", sid).done(function(){
                    $("#edit"+this.itemId).fadeIn();
                    $("#clone"+this.itemId).fadeIn();
            })
            hasPermission(proxyPath + "f/storages/" + eid, "DELETE", sid).done(function(){
                    $("#delete"+this.itemId).fadeIn();
            })

            if (row.storage.storage_id.Valid) {
                // this is an history
                var actions = ['<i title="history card" class="material-icons">alarm</i>'];
            } else {
                // buttons are hidden by default
                var actions = [
                '<button id="edit' + sid + '" class="edit btn btn-link" style="display: none;" title="edit" type="button">',
                    '<i class="material-icons">edit</i>',
                '</button>',
                '<button id="clone' + sid + '" class="clone btn btn-link" style="display: none;" title="clone" type="button">',
                    '<i class="material-icons">filter_none</i>',
                '</button>',
                '<button id="delete' + sid + '" class="delete btn btn-link" style="display: none;" title="delete" type="button">',
                    '<i class="material-icons">delete</i>',
                '</button>'];
            }

            if (row.storage_creationdate != row.storage_modificationdate && !row.storage.storage_id.Valid) {
                actions.push('<button id="history' + sid + '" class="history btn btn-link" title="show history" type="button">');
                actions.push('<i class="material-icons">alarm</i>');
                actions.push('</button>');
            }

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEdit(e, value, row, index) {
            // clearing selections
            $('input#storage_quantity').val(null);
            $('input#storage_entrydate').val(null);
            $('input#storage_exitdate').val(null);
            $('input#storage_openingdate').val(null);
            $('input#storage_expirationdate').val(null);
            $('input#storage_reference').val(null);
            $('input#storage_batchnumber').val(null);
            $('input#storage_barecode').val(null);
            $('input#storage_comment').val(null);

            $('select#storelocation').val(null).trigger('change');
            $('select#storelocation').find('option').remove();
            $('select#unit').val(null).trigger('change');
            $('select#unit').find('option').remove();
            $('select#supplier').val(null).trigger('change');
            $('select#supplier').find('option').remove();

            // getting the storage
            $.ajax({
                url: proxyPath + "storages/" + row['storage_id'].Int64,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);

                // processing sqlNull values
                newfdata = normalizeSqlNull(fdata)

                // autofilling form
                $("#edit-collapse").autofill( newfdata, {"findbyname": false } );

                // setting index hidden input
                $("input#index").val(index);

                // select2 is not autofilled - we need a special operation
                var newOption = new Option(data.storelocation.storelocation_name.String, data.storelocation.storelocation_id.Int64, true, true);
                $('select#storelocation').append(newOption).trigger('change');

                if (data.unit.unit_id.Valid) {
                    var newOption = new Option(data.unit.unit_label.String, data.unit.unit_id.Int64, true, true);
                    $('select#unit').append(newOption).trigger('change');
                }

                if (data.supplier.supplier_id.Valid) {
                    var newOption = new Option(data.supplier.supplier_label.String, data.supplier.supplier_id.Int64, true, true);
                    $('select#supplier').append(newOption).trigger('change');
                }

            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // finally collapsing the view
            $('#edit-collapse').collapse('show');
            $('#list-collapse').collapse('hide');
            $("#switchview").hide();
            $("#storelocation-selector").hide();
        }
        window.operateEvents = {
            'click .edit': function (e, value, row, index) {
                operateEdit(e, value, row, index)
            },
            'click .history': function (e, value, row, index) {
                window.location = proxyPath + "v/storages?storage="+row['storage_id'].Int64+"&history=true";
            },
            'click .clone': function (e, value, row, index) {
                window.location = proxyPath + "vc/storages?storage="+row['storage_id'].Int64+"&product="+row['product']['product_id'];
            },
            'click .delete': function (e, value, row, index) {
                // hiding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: proxyPath + "storages/" + row['storage_id'].Int64,
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        displayMessage("storage deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
| {{end}}