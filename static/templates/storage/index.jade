| {{define "CONTENT"}}

    .row
        .col-sm-10
            #filter-item
        .col-sm-2.d-flex.justify-content-end
            #button-store
    .row
        .col-sm-6
            #storelocation-selector
                | {{$label := ""}} {{$name := "storelocationselector"}}
                +select
        .col-sm-6.d-flex.justify-content-end
            button.btn.btn-dark#switchview(type="button" onclick="switchProductStorageView()") switch to product view

    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-side-pagination='server', 
                                data-page-list="[10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-query-params='queryParams',
                                data-sort-name='name.name_label',
                                data-detail-view="true",
                                data-detail-formatter="detailFormatter",
                                data-row-attributes="rowAttributes")
                        thead
                            tr
                                th(data-field='storage_id' data-sortable='true') ID
                                th(data-field='storage_creationdate' data-formatter='dateFormatter' data-sortable='true') creation date
                                th(data-field='storage_barecode' data-formatter='storage_barecodeFormatter') barecode
                                th(data-field='product.name.name_label' data-sortable='true') product
                                th(data-field='storelocation.storelocation_fullpath' data-sortable='true' data-formatter='storelocation_fullpathFormatter') store location
                                th(data-field='operate', data-formatter='operateFormatter', data-events='operateEvents') actions

        #edit-collapse.collapse(data-parent='#accordion')
            form#storage
                input#index(type='hidden', name='index', value='')
                input#storage_id(type='hidden', name='storage_id', value='')

                input#exactMatchSupplier(type="hidden")

                .form-group.row
                    .col-sm-12
                        | {{$label := "store location"}} {{$name := "storelocation"}}
                        +select
                .form-group.row
                    .col-sm-6
                        | {{$label := "quantity"}} {{$name := "storage_quantity"}} {{$step := "any"}} {{$min := "1"}} {{$max := "10000000"}} {{$value := ""}}
                        +inputnumber
                    .col-sm-6
                        | {{$label := "unit"}} {{$name := "unit"}}
                        +select 
                .form-group.row
                    .col-sm-12
                        | {{$label := "supplier"}} {{$name := "supplier"}}
                        +select
                .form-group.row
                    .col-sm-12
                        | {{$label := "barecode"}} {{$name := "storage_barecode"}}
                        +inputtext
                .form-group.row
                    .col-sm-12
                        | {{$label := "comment"}} {{$name := "storage_comment"}}
                        +inputtext  

            button#save.btn.btn-primary(type='button', onclick='saveStorage()') save changes
            button.btn.btn-secondary(type='button', onclick='closeEdit();') close
| {{end}}
| {{define "CONTENTJS"}}
| {{template "COMMONCONTENTJS"}}
    script.
        //
        // close buttons actions
        //
        function closeEdit() { 

            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            $("#list-collapse").collapse("show"); 
            $("#edit-collapse").collapse("hide"); 
            if (!urlParams.get("product") && !urlParams.get("entity")) {
                $("#switchview").show();
                $("#storelocation-selector").show();
            }
        }

        //
        // startup actions
        //
        $( document ).ready(function() {    
        });
        $('#table').on('load-success.bs.table refresh.bs.table', function () {
            
            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            // FIXME: this should be done before table rendering to avoid 2 ajax calls
            // populating search input if needed
            //if (URLValues.has("search")) {
            if (urlParams.has("search")) {
                //$('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
                $('#table').bootstrapTable('resetSearch', urlParams.get("search"));
            }
            // highlight row if needed
            //if (URLValues.has("hl")) {
            if (urlParams.has("hl")) {
                //highlightRow("storage_id", URLValues.get("hl")[0]);
                highlightRow("storage_id", urlParams.get("hl"));
            }
            // display titles, switch products<>storages selector
            //if (URLValues.has("entity")) {
            if (urlParams.has("entity")) {
                //e = URLValues.get("entity")[0];
                e = urlParams.get("entity");
                $.ajax({
                    url: "/entities/" + e,
                    method: "GET",
                }).done(function(data, textStatus, jqXHR) {
                    $("#filter-item").html(createTitle(data.entity_name));
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });
            }
            if (urlParams.has("storelocation")) {
                //e = URLValues.get("entity")[0];
                s = urlParams.get("storelocation");
                $.ajax({
                    url: "/storelocations/" + s,
                    method: "GET",
                }).done(function(data, textStatus, jqXHR) {
                    $("#filter-item").html(createTitle(data.storelocation_name.String));
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });
            }
            //if (URLValues.has("product")) {
            if (urlParams.has("product")) {
                //p = URLValues.get("product")[0];
                p = urlParams.get("product");
                // setting the title
                $.ajax({
                    url: "/products/" + p,
                    method: "GET",
                }).done(function(data, textStatus, jqXHR) {
                    $("#filter-item").html(createTitle(data.name.name_label + " (" + data.casnumber.casnumber_label + ") " + data.product_specificity.String));
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });
                // hiding the storage<>product view switch
                $("#switchview").hide();
                $("#storelocation-selector").hide();
                
                // adding a create storage button for the product
                b = $("<button>").addClass("store btn btn-link").attr("title", "store this product").attr("type", "button");
                b.attr("onclick", "window.location.href = '/vc/storages?product=" + p + "'");
                i = $("<i>").addClass("material-icons").text("move_to_inbox");
                b.append(i);
                $("#button-store").html(b);
            }

            cleanQueryParams();
        });

        //
        // table data loading
        //
        function queryParams(params) {
            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            if (urlParams.has("entity")) {
                params["entity"] = urlParams.get("entity");
            }
            if (urlParams.has("storelocation")) {
                params["storelocation"] = urlParams.get("storelocation");
            }
            if (urlParams.has("product")) {
                params["product"] = urlParams.get("product");
            }
            return params;
        }
        function getData(params) {
            // saving the query parameters
            lastQueryParams = params;
            $.ajax({
                url: "/storages",
                method: "GET",
                dataType: "JSON",
                data: params.data,
            }).done(function(data, textStatus, jqXHR) {
                params.success({
                    rows: data.rows,
                    total: data.total,
                });
            }).fail(function(jqXHR, textStatus, errorThrown) {
                params.error(jqXHR.statusText);                
                handleHTTPError(jqXHR.statusText, jqXHR.status);
            });
        }

        //
        // table row attributes
        //
        function rowAttributes(row, index) {
            return {"storage_id":row["storage_id"]}
        }
        //
        // table detail formatter
        //
        function detailFormatter(index, row) {
            var html = [];
            html.push("<p><b>product</b>: " + row["product"]["name"]["name_label"] + "</p>")
            html.push("<p><b>store location</b>: " + row["storelocation"]["storelocation_name"]["String"] + "</p>")
            html.push("<p><b>created at</b>: " + dateFormatter(row["storage_creationdate"], null, null, null) + "</p>")
            html.push("<p><b>by</b>: " + row["person"]["person_email"] + "</p>")
            html.push("<p><b>comment</b>: " + row["storage_comment"]["String"] + "</p>")
            html.push("<p><b>barecode</b>: " + row["storage_barecode"]["String"] + "</p>")
            html.push("<p><b>quantity</b>: " + row["storage_quantity"]["Float64"] + " " + row["unit"]["unit_label"]["String"] + "</p>")
            html.push("<p><b>supplier</b>: " + row["supplier"]["supplier_label"]["String"] + "</p>")
            return html.join('');
        }
        //
        // date formatter
        //
        function dateFormatter(value, row, index, field) {
            date = new Date(value);
            return date.toLocaleString();
        }
        //
        // storelocation_name formatter
        //
        function storelocation_fullpathFormatter(value, row, index, field) {
            if (row.storelocation.storelocation_color.Valid) {
                return "<span style='color:" + row.storelocation.storelocation_color.String + ";'>" + value + "</span>";
            } else {
                return "<span>" + value + "</span>";
            }
        }
        //
        // storage_barecode formatter
        //
        function storage_barecodeFormatter(value, row, index, field) {
            if (row.storage_barecode.Valid) {
                return row.storage_barecode.String;
            } else {
                return "";
            }
        }

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            sid = row.storage_id
            eid = row.storelocation.entity.entity_id
            hasPermission("/f/storages/" + eid, "PUT", sid).done(function(){
                    $("#edit"+this.itemId).fadeIn();
            })
            hasPermission("/f/storages/" + eid, "DELETE", sid).done(function(){
                    $("#delete"+this.itemId).fadeIn();
            })

            // buttons are hidden by default
            var actions = [
            '<button id="edit' + sid + '" class="edit btn btn-link" style="display: none;" title="edit" type="button">',
                '<i class="material-icons">edit</i>',
            '</button>',
            '<button id="delete' + sid + '" class="delete btn btn-link" style="display: none;" title="delete" type="button">',
                '<i class="material-icons">delete</i>',
            '</button>'];

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEdit(e, value, row, index) {
            // clearing selections
            $('select#storelocation').val(null).trigger('change');
            $('select#storelocation').find('option').remove();
            $('select#unit').val(null).trigger('change');
            $('select#unit').find('option').remove();
            $('select#supplier').val(null).trigger('change');
            $('select#supplier').find('option').remove();

            // getting the storage
            $.ajax({
                url: "/storages/" + row['storage_id'],
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);

                // processing sqlNull values
                newfdata = normalizeSqlNull(fdata)

                // autofilling form
                $("#edit-collapse").autofill( newfdata, {"findbyname": false } );

                // setting index hidden input
                $("input#index").val(index);

                // select2 is not autofilled - we need a special operation
                var newOption = new Option(data.storelocation.storelocation_name.String, data.storelocation.storelocation_id.Int64, true, true);
                $('select#storelocation').append(newOption).trigger('change');

                if (data.unit.unit_id.Valid) {
                    var newOption = new Option(data.unit.unit_label.String, data.unit.unit_id.Int64, true, true);
                    $('select#unit').append(newOption).trigger('change');
                }

                if (data.supplier.supplier_id.Valid) {
                    var newOption = new Option(data.supplier.supplier_label.String, data.supplier.supplier_id.Int64, true, true);
                    $('select#supplier').append(newOption).trigger('change');
                }

            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // finally collapsing the view
            $('#edit-collapse').collapse('show');
            $('#list-collapse').collapse('hide');
            $("#switchview").hide();
            $("#storelocation-selector").hide();
        }
        window.operateEvents = {
            'click .edit': function (e, value, row, index) {
                operateEdit(e, value, row, index)
            },
            'click .delete': function (e, value, row, index) {
                // hiding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: "/storages/" + row['storage_id'],
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        displayMessage("storage deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
| {{end}}