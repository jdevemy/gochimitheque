extends static/templates/base.jade

block content
    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-side-pagination='server', 
                                data-page-list="[10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-query-params='queryParams',
                                data-sort-name='storelocation_name')
                        thead
                            tr
                                th(data-field='storelocation_id') ID
                                th(data-field='storelocation_name' data-sortable='true') name
                                th(data-field='entity.entity_name' data-sortable='true') entity
                                th(data-field='operate', data-formatter='operateFormatter', data-events='operateEvents') actions

        #edit-collapse.collapse(data-parent='#accordion')
            form#storelocation-update
                input#index(type='hidden', name='index', value='')
                input#storelocation_id(type='hidden', name='storelocation_id', value='')

                .form-group.row
                    | {{$label := "name"}} {{$name := "storelocation_name"}}
                    +inputtext
                .form-group.row
                    | {{$label := "entity"}} {{$name := "entity"}}
                    +select
                    
            button#save.btn.btn-primary(type='button', onclick='saveStoreLocation()') save changes
            button.btn.btn-secondary(type='button', onclick='closeEdit();') close

block contentjs
    script.
        //
        // close buttons actions
        //
        function closeEdit() { $("#list-collapse").collapse("show"); $("#edit-collapse").collapse("hide"); }
        
        var URLValues = new Map();

        // initializing query parameters map
        {{ range $key, $value := .URLValues }}
            URLValues.set({{ $key }}, {{ $value }});
        {{ end }}
        
        $( document ).ready(function() {           

            // populating search input if needed
            if (URLValues.has("search")) {
                $('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
            }

            //
            // update form validation
            //
            $( "#storelocation-update" ).validate({
                // ignore required to validate select2
                ignore: "",
                errorClass: "alert alert-danger",
                rules: {
                    storelocation_name: {
                        required: true,
                    },
                    entity: {
                        required: true,
                    },
                },
            });

            //
            // manager select2
            //
            $('select#entity').select2({
                dropdownParent: $('#edit-collapse'),
                ajax: {
                    url: '/entities',
                    dataType: 'json',
                    processResults: function (data) {
                        // replacing name by text expected by select2
                        var newdata = $.map(data.rows, function (obj) {
                            obj.text = obj.text || obj.entity_name;
                            obj.id = obj.id || obj.entity_id;
                            return obj;
                        });
                        return {
                            results: newdata
                        };
                    }
                }
            });
        });
        
        //
        // save store location callback
        //
        function saveStoreLocation() {
            var form = $("#storelocation-update");
            if (! form.valid()) {
                return;
            };

            var id = $("#edit-collapse input#storelocation_id").val(),
                name = $("#edit-collapse input#storelocation_name").val(),
                selectedentity = $('select#entity').select2('data')[0];
                data = {};
                $.extend(data, {
                    "storelocation_id": id,
                    "storelocation_name": name,
                    "entity.entity_id": selectedentity.id,
                    "entity.entity_name": selectedentity.text,
                });
                $.ajax({
                    url: "/storelocations/" + id,
                    method: "PUT",
                    dataType: 'json',
                    data: data,
                }).done(function(data, textStatus, jqXHR) {
                    $('#list-collapse').collapse('show');
                    $('#edit-collapse').collapse('hide');
                    var $table = $('#table');
                    var index = $('input#index').val();
                    $table.bootstrapTable('updateRow', {
                        index: index,
                        row: {
                            "storelocation_name": name,
                            "entity.entity_name": selectedentity.text,
                        }
                    });
                    displayMessage("store location " + name + " updated", "success");
                }).fail(function(jqXHR, textStatus, errorThrown) {
                    handleHTTPError(jqXHR.statusText, jqXHR.status)
                });  
        }

        //
        // table data loading
        //
        function queryParams(params) {
            if (URLValues.has("entity")) {
                params["entity"] = URLValues.get("entity")[0];
            }
            return params;
        }
        function getData(params) {
            $.ajax({
                url: "/storelocations",
                method: "GET",
                dataType: "JSON",
                data: params.data,
            }).done(function(data, textStatus, jqXHR) {
                params.success({
                    rows: data.rows,
                    total: data.total,
                });
            }).fail(function(jqXHR, textStatus, errorThrown) {
                params.error(jqXHR.statusText);                
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
        }

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            slid = row.storelocation_id
            hasPermission2("/f/storelocations/" + slid, "PUT", slid).done(function(){
                    $("#edit"+this.itemId).fadeIn();
            })
            hasPermission2("/f/storelocations/" + slid, "DELETE", slid).done(function(){
                    $("#delete"+this.itemId).fadeIn();
            })

            // buttons are hidden by default
            var actions = [
            '<button id="edit' + slid + '" class="edit btn btn-secondary" style="display: none;" title="edit" type="button">',
                '<i class="fas fa-edit"></i>',
            '</button>',
            '<button id="delete' + slid + '" class="delete btn btn-secondary" style="display: none;" title="delete" type="button">',
                '<i class="fas fa-trash-alt"></i>',
            '</button>'];

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEdit(e, value, row, index) {
            // clearing selections
            $('select#entity').val(null).trigger('change');
            $('select#entity').find('option').remove();

            // getting the store location
            $.ajax({
                url: "/storelocations/" + row['storelocation_id'],
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);
                // autofilling form
                $("#edit-collapse").autofill( fdata, {"findbyname": false } );
                // setting index hidden input
                $("input#index").val(index);
                // select2 is not autofilled - we need a special operation
                var newOption = new Option(data.entity.entity_name, data.entity.entity_id, true, true);
                $('select#entity').append(newOption).trigger('change');
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // finally collapsing the view
            $('#edit-collapse').collapse('show');
            $('#list-collapse').collapse('hide');
        }
        window.operateEvents = {
            'click .edit': function (e, value, row, index) {
                operateEdit(e, value, row, index)
            },
            'click .delete': function (e, value, row, index) {
                // hiding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: "/storelocations/" + row['storelocation_id'],
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        displayMessage("store location deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
