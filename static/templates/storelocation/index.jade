| {{define "CONTENT"}}
    #accordion
        #list-collapse.collapse.show(data-parent='#accordion')
            header.row
                .col-sm-12
                    table#table(data-toggle='table', 
                                data-striped='true', 
                                data-search='true', 
                                data-side-pagination='server', 
                                data-page-list="[10, 20, 50, 100]",
                                data-pagination='true', 
                                data-ajax='getData', 
                                data-query-params='queryParams',
                                data-sort-name='storelocation_fullpath')
                        thead
                            tr
                                th(data-field='storelocation_id' data-sortable='true' data-formatter='storelocation_idFormatter') ID
                                th(data-field='storelocation_fullpath' data-sortable='true') name
                                th(data-field='entity.entity_name' data-sortable='true') entity
                                th(data-field='storelocation_color' data-sortable='false' data-formatter='storelocation_colorFormatter') color
                                th(data-field='storelocation_canstore' data-sortable='false' data-formatter='storelocation_canstoreFormatter') can store
                                th(data-field='storelocation' data-sortable='true' data-formatter='storelocationFormatter') parent
                                th(data-field='operate' data-formatter='operateFormatter' data-events='operateEvents') actions

        #edit-collapse.collapse(data-parent='#accordion')
            form#storelocation
                input#index(type='hidden', name='index', value='')
                input#storelocation_id(type='hidden', name='storelocation_id', value='')

                .form-group.row
                    .form-group.col-sm-12
                        | {{$label := "name"}} {{$name := "storelocation_name"}}
                        +inputtext
                .form-group.row
                    .form-group.col-sm-12
                        | {{$label := "entity"}} {{$name := "entity"}}
                        +select
                .form-group.row
                    .form-group.col-sm-12
                        | {{$label := "parent"}} {{$name := "storelocation"}}
                        +select 
                .form-group.row
                    .form-group.col-sm-12
                        | {{$label := "can store?"}} {{$name := "storelocation_canstore"}}
                        +checkbox
                .form-group.row
                    .form-group.col-sm-12
                        | {{$label := "color"}} {{$name := "storelocation_color"}}
                        +inputtext
                    
            button#save.btn.btn-primary(type='button', onclick='saveStoreLocation()') save changes
            button.btn.btn-secondary(type='button', onclick='closeEdit();') close
| {{end}}
| {{define "CONTENTJS"}}
| {{template "COMMONCONTENTJS"}}
    script.
        //
        // close buttons actions
        //
        function closeEdit() { $("#list-collapse").collapse("show"); $("#edit-collapse").collapse("hide"); }
        
        $( document ).ready(function() {           

            // populating search input if needed
            if (URLValues.has("search")) {
                $('#table').bootstrapTable('resetSearch', URLValues.get("search")[0]);
            }

        });
        
        //
        // table data loading
        //
        function queryParams(params) {
            // getting request parameters
            var urlParams = new URLSearchParams(window.location.search);

            if (urlParams.has("entity")) {
                params["entity"] = urlParams.get("entity");
            }
            return params;
        }
        function getData(params) {
            $.ajax({
                url: proxyPath + "storelocations",
                method: "GET",
                dataType: "JSON",
                data: params.data,
            }).done(function(data, textStatus, jqXHR) {
                params.success({
                    rows: data.rows,
                    total: data.total,
                });
            }).fail(function(jqXHR, textStatus, errorThrown) {
                params.error(jqXHR.statusText);                
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });
        }

        //
        // storelocation_idFormatter formatter
        //
        function storelocation_idFormatter(value, row, index, field) {
            if (value.Valid) {
                return value.Int64;
            } else {
                return "";
            }
        }
        //
        // storelocation_colorFormatter formatter
        //
        function storelocation_colorFormatter(value, row, index, field) {
            if (value.Valid) {
                return '<div style="background-color: ' + value.String + '">&nbsp;</div>';
            } else {
                return "";
            }
        }
        //
        // storelocation_canstoreFormatter formatter
        //
        function storelocation_canstoreFormatter(value, row, index, field) {
            if (value.Valid && value.Bool) {
                return '<i class="material-icons">check</i>';
            } else {
                return '<i class="material-icons">close</i>';
            }
        }
        //
        // storelocationFormatter formatter
        //
        function storelocationFormatter(value, row, index, field) {
            if (value.storelocation_name.Valid) {
                return value.storelocation_name.String;
            } else {
                return "";
            }
        }

        //
        // table items actions
        //
        function operateFormatter(value, row, index) {
            // show action buttons if permitted
            slid = row.storelocation_id.Int64
            hasPermission(proxyPath + "f/storelocations/" + slid, "PUT", slid).done(function(){
                    $("#edit"+this.itemId).fadeIn();
            })
            hasPermission(proxyPath + "f/storelocations/" + slid, "DELETE", slid).done(function(){
                    $("#delete"+this.itemId).fadeIn();
            })

            // buttons are hidden by default
            var actions = [
            '<button id="edit' + slid + '" class="edit btn btn-primary btn-sm" style="display: none;" title="edit" type="button">',
                '<i class="material-icons">edit</i>',
            '</button>',
            '<button id="delete' + slid + '" class="delete btn btn-primary btn-sm" style="display: none;" title="delete" type="button">',
                '<i class="material-icons">delete</i>',
            '</button>'];

            return actions.join('&nbsp;')    
        }

        // items actions callback
        function operateEdit(e, value, row, index) {
            // clearing selections
            $('select#entity').val(null).trigger('change');
            $('select#entity').find('option').remove();
            $('select#storelocation').val(null).trigger('change');
            $('select#storelocation').find('option').remove();

            // getting the store location
            $.ajax({
                url: proxyPath + "storelocations/" + row['storelocation_id'].Int64,
                method: "GET",
            }).done(function(data, textStatus, jqXHR) {
                // flattening response data
                fdata = flatten(data);
                // processing sqlNull values
                newfdata = normalizeSqlNull(fdata)
                // autofilling form
                $("#edit-collapse").autofill( newfdata, {"findbyname": false } );
                // setting index hidden input
                $("input#index").val(index);
                // select2 is not autofilled - we need a special operation
                var newOption = new Option(data.entity.entity_name, data.entity.entity_id, true, true);
                $('select#entity').append(newOption).trigger('change');
            }).fail(function(jqXHR, textStatus, errorThrown) {
                handleHTTPError(jqXHR.statusText, jqXHR.status)
            });

            // finally collapsing the view
            $('#edit-collapse').collapse('show');
            $('#list-collapse').collapse('hide');
        }
        window.operateEvents = {
            'click .edit': function (e, value, row, index) {
                operateEdit(e, value, row, index)
            },
            'click .delete': function (e, value, row, index) {
                // hiding possible previous confirmation button
                $(this).confirmation("show").off( "confirmed.bs.confirmation");
                $(this).confirmation("show").off( "canceled.bs.confirmation");
                
                // ask for confirmation and then delete
                $(this).confirmation("show").on( "confirmed.bs.confirmation", function() {
                    $.ajax({
                        url: proxyPath + "storelocations/" + row['storelocation_id'],
                        method: "DELETE",
                    }).done(function(data, textStatus, jqXHR) {
                        displayMessage("store location deleted", "success");
                        var $table = $('#table');
                        $table.bootstrapTable('refresh');
                    }).fail(function(jqXHR, textStatus, errorThrown) {
                        handleHTTPError(jqXHR.statusText, jqXHR.status)
                    });
                }).on( "canceled.bs.confirmation", function() {
                });
            }
        };
| {{end}}