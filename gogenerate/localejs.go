package main

import (
	"fmt"
	"log"
	"os"
	"text/template"

	"regexp"

	"github.com/tbellembois/gochimitheque/locales"
)

// output file template
var packageTemplate = template.Must(template.New("").Delims("[[", "]]").Parse(`// Code generated by go generate; DO NOT EDIT.
| {{define "LOCALEJS"}}

script.
    [[ range $k, $v := . ]]
	var [[ $k ]] = "[[ $v ]]";
	[[ end ]]

| {{end}}
`))

// locales regexp
var r = regexp.MustCompile("\\[(\\S+)\\]\\n\\s+one = \"(.+)\"")

// locales map
var m map[string]string

func main() {
	fmt.Println("generating javascript locales file")

	m = make(map[string]string)

	// finding matches
	ms := r.FindAllStringSubmatch(string(locales.LOCALES_EN), -1)
	for _, v := range ms {
		//fmt.Printf("%d. %s\n", k, v)
		//fmt.Printf("%s -> %s\n", v[1], v[2])
		k := fmt.Sprintf("locale_%s", v[1])
		m[k] = v[2]
	}

	// opening output file
	f, err := os.Create("/tmp/test.foo")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, m)
}
